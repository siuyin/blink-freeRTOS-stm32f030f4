
blink-freeRTOS-stm32f030f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003930  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a98  08003a98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a98  08003a98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a98  08003a98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  2000000c  08003aac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  08003aac  000209bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e26c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002390  00000000  00000000  0002e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  00030630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00031488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d154  00000000  00000000  000321b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acb2  00000000  00000000  0003f30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004dea7  00000000  00000000  00049fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00097e65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003290  00000000  00000000  00097ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039d8 	.word	0x080039d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080039d8 	.word	0x080039d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2260      	movs	r2, #96	; 0x60
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000028 	.word	0x20000028
 800024c:	2000007c 	.word	0x2000007c

08000250 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b098      	sub	sp, #96	; 0x60
 8000254:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000256:	f000 f9fd 	bl	8000654 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800025a:	f000 f853 	bl	8000304 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800025e:	f000 f89b 	bl	8000398 <MX_GPIO_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of ledMutex */
	osMutexDef(ledMutex);
 8000262:	2158      	movs	r1, #88	; 0x58
 8000264:	187b      	adds	r3, r7, r1
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	187b      	adds	r3, r7, r1
 800026c:	2200      	movs	r2, #0
 800026e:	605a      	str	r2, [r3, #4]
	ledMutexHandle = osMutexCreate(osMutex(ledMutex));
 8000270:	187b      	adds	r3, r7, r1
 8000272:	0018      	movs	r0, r3
 8000274:	f001 fb8a 	bl	800198c <osMutexCreate>
 8000278:	0002      	movs	r2, r0
 800027a:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <main+0x98>)
 800027c:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 96);
 800027e:	213c      	movs	r1, #60	; 0x3c
 8000280:	187b      	adds	r3, r7, r1
 8000282:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <main+0x9c>)
 8000284:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000286:	c331      	stmia	r3!, {r0, r4, r5}
 8000288:	ca31      	ldmia	r2!, {r0, r4, r5}
 800028a:	c331      	stmia	r3!, {r0, r4, r5}
 800028c:	6812      	ldr	r2, [r2, #0]
 800028e:	601a      	str	r2, [r3, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2100      	movs	r1, #0
 8000294:	0018      	movs	r0, r3
 8000296:	f001 fb18 	bl	80018ca <osThreadCreate>
 800029a:	0002      	movs	r2, r0
 800029c:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <main+0xa0>)
 800029e:	601a      	str	r2, [r3, #0]

	/* definition and creation of on */
	osThreadDef(on, StartOn, osPriorityNormal, 0, 96);
 80002a0:	2120      	movs	r1, #32
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <main+0xa4>)
 80002a6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002a8:	c331      	stmia	r3!, {r0, r4, r5}
 80002aa:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002ac:	c331      	stmia	r3!, {r0, r4, r5}
 80002ae:	6812      	ldr	r2, [r2, #0]
 80002b0:	601a      	str	r2, [r3, #0]
	onHandle = osThreadCreate(osThread(on), NULL);
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2100      	movs	r1, #0
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 fb07 	bl	80018ca <osThreadCreate>
 80002bc:	0002      	movs	r2, r0
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <main+0xa8>)
 80002c0:	601a      	str	r2, [r3, #0]

	/* definition and creation of off */
	osThreadDef(off, StartOff, osPriorityIdle, 0, 96);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <main+0xac>)
 80002c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002c8:	c313      	stmia	r3!, {r0, r1, r4}
 80002ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002cc:	c313      	stmia	r3!, {r0, r1, r4}
 80002ce:	6812      	ldr	r2, [r2, #0]
 80002d0:	601a      	str	r2, [r3, #0]
	offHandle = osThreadCreate(osThread(off), NULL);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 faf7 	bl	80018ca <osThreadCreate>
 80002dc:	0002      	movs	r2, r0
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <main+0xb0>)
 80002e0:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002e2:	f001 faea 	bl	80018ba <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002e6:	e7fe      	b.n	80002e6 <main+0x96>
 80002e8:	20000974 	.word	0x20000974
 80002ec:	080039fc 	.word	0x080039fc
 80002f0:	20000968 	.word	0x20000968
 80002f4:	08003a1c 	.word	0x08003a1c
 80002f8:	20000970 	.word	0x20000970
 80002fc:	08003a3c 	.word	0x08003a3c
 8000300:	2000096c 	.word	0x2000096c

08000304 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b091      	sub	sp, #68	; 0x44
 8000308:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800030a:	2410      	movs	r4, #16
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0018      	movs	r0, r3
 8000310:	2330      	movs	r3, #48	; 0x30
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f003 fb56 	bl	80039c6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800031a:	003b      	movs	r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	2310      	movs	r3, #16
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f003 fb4f 	bl	80039c6 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000328:	0021      	movs	r1, r4
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2202      	movs	r2, #2
 800032e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2201      	movs	r2, #1
 8000334:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2210      	movs	r2, #16
 800033a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2202      	movs	r2, #2
 8000340:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	22a0      	movs	r2, #160	; 0xa0
 800034c:	0392      	lsls	r2, r2, #14
 800034e:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000356:	187b      	adds	r3, r7, r1
 8000358:	0018      	movs	r0, r3
 800035a:	f000 fbe7 	bl	8000b2c <HAL_RCC_OscConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x62>
		Error_Handler();
 8000362:	f000 f8ab 	bl	80004bc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000366:	003b      	movs	r3, r7
 8000368:	2207      	movs	r2, #7
 800036a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036c:	003b      	movs	r3, r7
 800036e:	2202      	movs	r2, #2
 8000370:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	003b      	movs	r3, r7
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800037e:	003b      	movs	r3, r7
 8000380:	2101      	movs	r1, #1
 8000382:	0018      	movs	r0, r3
 8000384:	f000 feee 	bl	8001164 <HAL_RCC_ClockConfig>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x8c>
		Error_Handler();
 800038c:	f000 f896 	bl	80004bc <Error_Handler>
	}
}
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	b011      	add	sp, #68	; 0x44
 8000396:	bd90      	pop	{r4, r7, pc}

08000398 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	0018      	movs	r0, r3
 80003a2:	2314      	movs	r3, #20
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f003 fb0d 	bl	80039c6 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_GPIO_Init+0x6c>)
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_GPIO_Init+0x6c>)
 80003b2:	2180      	movs	r1, #128	; 0x80
 80003b4:	0289      	lsls	r1, r1, #10
 80003b6:	430a      	orrs	r2, r1
 80003b8:	615a      	str	r2, [r3, #20]
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_GPIO_Init+0x6c>)
 80003bc:	695a      	ldr	r2, [r3, #20]
 80003be:	2380      	movs	r3, #128	; 0x80
 80003c0:	029b      	lsls	r3, r3, #10
 80003c2:	4013      	ands	r3, r2
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003c8:	2390      	movs	r3, #144	; 0x90
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	2200      	movs	r2, #0
 80003ce:	2110      	movs	r1, #16
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fb8d 	bl	8000af0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2210      	movs	r2, #16
 80003da:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2201      	movs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003ee:	1d3a      	adds	r2, r7, #4
 80003f0:	2390      	movs	r3, #144	; 0x90
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	0011      	movs	r1, r2
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fa0a 	bl	8000810 <HAL_GPIO_Init>

}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b006      	add	sp, #24
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000

08000408 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f001 faa7 	bl	8001964 <osDelay>
 8000416:	e7fb      	b.n	8000410 <StartDefaultTask+0x8>

08000418 <StartOn>:
 * @brief Function implementing the on thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOn */
void StartOn(void const *argument) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOn */
	/* Infinite loop */
	for (;;) {
		osMutexWait(ledMutexHandle, 1000);
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <StartOn+0x3c>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	23fa      	movs	r3, #250	; 0xfa
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	0019      	movs	r1, r3
 800042a:	0010      	movs	r0, r2
 800042c:	f001 fac6 	bl	80019bc <osMutexWait>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000430:	2390      	movs	r3, #144	; 0x90
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	2201      	movs	r2, #1
 8000436:	2110      	movs	r1, #16
 8000438:	0018      	movs	r0, r3
 800043a:	f000 fb59 	bl	8000af0 <HAL_GPIO_WritePin>
		osMutexRelease(ledMutexHandle);
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <StartOn+0x3c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	0018      	movs	r0, r3
 8000444:	f001 fb04 	bl	8001a50 <osMutexRelease>
		osDelay(500);
 8000448:	23fa      	movs	r3, #250	; 0xfa
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fa89 	bl	8001964 <osDelay>
		osMutexWait(ledMutexHandle, 1000);
 8000452:	e7e5      	b.n	8000420 <StartOn+0x8>
 8000454:	20000974 	.word	0x20000974

08000458 <StartOff>:
 * @brief Function implementing the off thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOff */
void StartOff(void const *argument) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOff */
	/* Infinite loop */
	for (;;) {
		osMutexWait(ledMutexHandle, 1000);
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <StartOff+0x3c>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	23fa      	movs	r3, #250	; 0xfa
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	0019      	movs	r1, r3
 800046a:	0010      	movs	r0, r2
 800046c:	f001 faa6 	bl	80019bc <osMutexWait>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000470:	2390      	movs	r3, #144	; 0x90
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	2200      	movs	r2, #0
 8000476:	2110      	movs	r1, #16
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fb39 	bl	8000af0 <HAL_GPIO_WritePin>
		osMutexRelease(ledMutexHandle);
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <StartOff+0x3c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	0018      	movs	r0, r3
 8000484:	f001 fae4 	bl	8001a50 <osMutexRelease>
		osDelay(510);
 8000488:	23ff      	movs	r3, #255	; 0xff
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	0018      	movs	r0, r3
 800048e:	f001 fa69 	bl	8001964 <osDelay>
		osMutexWait(ledMutexHandle, 1000);
 8000492:	e7e5      	b.n	8000460 <StartOff+0x8>
 8000494:	20000974 	.word	0x20000974

08000498 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d101      	bne.n	80004ae <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004aa:	f000 f8e7 	bl	800067c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40002000 	.word	0x40002000

080004bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x44>)
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_MspInit+0x44>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	430a      	orrs	r2, r1
 80004d8:	619a      	str	r2, [r3, #24]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x44>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	2201      	movs	r2, #1
 80004e0:	4013      	ands	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <HAL_MspInit+0x44>)
 80004e8:	69da      	ldr	r2, [r3, #28]
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_MspInit+0x44>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0549      	lsls	r1, r1, #21
 80004f0:	430a      	orrs	r2, r1
 80004f2:	61da      	str	r2, [r3, #28]
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <HAL_MspInit+0x44>)
 80004f6:	69da      	ldr	r2, [r3, #28]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	055b      	lsls	r3, r3, #21
 80004fc:	4013      	ands	r3, r2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	0019      	movs	r1, r3
 8000526:	2013      	movs	r0, #19
 8000528:	f000 f94c 	bl	80007c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800052c:	2013      	movs	r0, #19
 800052e:	f000 f95e 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <HAL_InitTick+0xa8>)
 8000534:	69da      	ldr	r2, [r3, #28]
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <HAL_InitTick+0xa8>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0049      	lsls	r1, r1, #1
 800053c:	430a      	orrs	r2, r1
 800053e:	61da      	str	r2, [r3, #28]
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <HAL_InitTick+0xa8>)
 8000542:	69da      	ldr	r2, [r3, #28]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4013      	ands	r3, r2
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800054e:	230c      	movs	r3, #12
 8000550:	18fa      	adds	r2, r7, r3
 8000552:	2310      	movs	r3, #16
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	0011      	movs	r1, r2
 8000558:	0018      	movs	r0, r3
 800055a:	f000 ff55 	bl	8001408 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800055e:	f000 ff3d 	bl	80013dc <HAL_RCC_GetPCLK1Freq>
 8000562:	0003      	movs	r3, r0
 8000564:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	4914      	ldr	r1, [pc, #80]	; (80005bc <HAL_InitTick+0xac>)
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff fdcc 	bl	8000108 <__udivsi3>
 8000570:	0003      	movs	r3, r0
 8000572:	3b01      	subs	r3, #1
 8000574:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0xb0>)
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <HAL_InitTick+0xb4>)
 800057a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <HAL_InitTick+0xb0>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <HAL_InitTick+0xb8>)
 8000580:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_InitTick+0xb0>)
 8000584:	6a3a      	ldr	r2, [r7, #32]
 8000586:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <HAL_InitTick+0xb0>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_InitTick+0xb0>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_InitTick+0xb0>)
 8000596:	0018      	movs	r0, r3
 8000598:	f000 ff60 	bl	800145c <HAL_TIM_Base_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d105      	bne.n	80005ac <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <HAL_InitTick+0xb0>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 ff8e 	bl	80014c4 <HAL_TIM_Base_Start_IT>
 80005a8:	0003      	movs	r3, r0
 80005aa:	e000      	b.n	80005ae <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	0018      	movs	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b00a      	add	sp, #40	; 0x28
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000
 80005bc:	000f4240 	.word	0x000f4240
 80005c0:	20000978 	.word	0x20000978
 80005c4:	40002000 	.word	0x40002000
 80005c8:	000003e7 	.word	0x000003e7

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <TIM14_IRQHandler+0x14>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 ff90 	bl	8001508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	20000978 	.word	0x20000978

080005f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490e      	ldr	r1, [pc, #56]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0b      	ldr	r4, [pc, #44]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800062a:	f7ff ffe3 	bl	80005f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800062e:	f003 f99d 	bl	800396c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fe0d 	bl	8000250 <main>

08000636 <LoopForever>:

LoopForever:
    b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   r0, =_estack
 8000638:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000644:	08003aa0 	.word	0x08003aa0
  ldr r2, =_sbss
 8000648:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800064c:	200009bc 	.word	0x200009bc

08000650 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_IRQHandler>
	...

08000654 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <HAL_Init+0x24>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_Init+0x24>)
 800065e:	2110      	movs	r1, #16
 8000660:	430a      	orrs	r2, r1
 8000662:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff ff53 	bl	8000510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066a:	f7ff ff2d 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066e:	2300      	movs	r3, #0
}
 8000670:	0018      	movs	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	001a      	movs	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	18d2      	adds	r2, r2, r3
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <HAL_IncTick+0x20>)
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000004 	.word	0x20000004
 800069c:	200009b8 	.word	0x200009b8

080006a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	200009b8 	.word	0x200009b8

080006b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	0002      	movs	r2, r0
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b7f      	cmp	r3, #127	; 0x7f
 80006c6:	d809      	bhi.n	80006dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	001a      	movs	r2, r3
 80006ce:	231f      	movs	r3, #31
 80006d0:	401a      	ands	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <__NVIC_EnableIRQ+0x30>)
 80006d4:	2101      	movs	r1, #1
 80006d6:	4091      	lsls	r1, r2
 80006d8:	000a      	movs	r2, r1
 80006da:	601a      	str	r2, [r3, #0]
  }
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	0002      	movs	r2, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b7f      	cmp	r3, #127	; 0x7f
 80006fc:	d828      	bhi.n	8000750 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fe:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <__NVIC_SetPriority+0xd4>)
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	089b      	lsrs	r3, r3, #2
 8000708:	33c0      	adds	r3, #192	; 0xc0
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	589b      	ldr	r3, [r3, r2]
 800070e:	1dfa      	adds	r2, r7, #7
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	0011      	movs	r1, r2
 8000714:	2203      	movs	r2, #3
 8000716:	400a      	ands	r2, r1
 8000718:	00d2      	lsls	r2, r2, #3
 800071a:	21ff      	movs	r1, #255	; 0xff
 800071c:	4091      	lsls	r1, r2
 800071e:	000a      	movs	r2, r1
 8000720:	43d2      	mvns	r2, r2
 8000722:	401a      	ands	r2, r3
 8000724:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	019b      	lsls	r3, r3, #6
 800072a:	22ff      	movs	r2, #255	; 0xff
 800072c:	401a      	ands	r2, r3
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	0018      	movs	r0, r3
 8000734:	2303      	movs	r3, #3
 8000736:	4003      	ands	r3, r0
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073c:	481f      	ldr	r0, [pc, #124]	; (80007bc <__NVIC_SetPriority+0xd4>)
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b25b      	sxtb	r3, r3
 8000744:	089b      	lsrs	r3, r3, #2
 8000746:	430a      	orrs	r2, r1
 8000748:	33c0      	adds	r3, #192	; 0xc0
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800074e:	e031      	b.n	80007b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <__NVIC_SetPriority+0xd8>)
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	0019      	movs	r1, r3
 8000758:	230f      	movs	r3, #15
 800075a:	400b      	ands	r3, r1
 800075c:	3b08      	subs	r3, #8
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	3306      	adds	r3, #6
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	3304      	adds	r3, #4
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	1dfa      	adds	r2, r7, #7
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	0011      	movs	r1, r2
 8000770:	2203      	movs	r2, #3
 8000772:	400a      	ands	r2, r1
 8000774:	00d2      	lsls	r2, r2, #3
 8000776:	21ff      	movs	r1, #255	; 0xff
 8000778:	4091      	lsls	r1, r2
 800077a:	000a      	movs	r2, r1
 800077c:	43d2      	mvns	r2, r2
 800077e:	401a      	ands	r2, r3
 8000780:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	401a      	ands	r2, r3
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	0018      	movs	r0, r3
 8000790:	2303      	movs	r3, #3
 8000792:	4003      	ands	r3, r0
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <__NVIC_SetPriority+0xd8>)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	001c      	movs	r4, r3
 80007a0:	230f      	movs	r3, #15
 80007a2:	4023      	ands	r3, r4
 80007a4:	3b08      	subs	r3, #8
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	430a      	orrs	r2, r1
 80007aa:	3306      	adds	r3, #6
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	18c3      	adds	r3, r0, r3
 80007b0:	3304      	adds	r3, #4
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b003      	add	sp, #12
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	210f      	movs	r1, #15
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	1c02      	adds	r2, r0, #0
 80007d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff81 	bl	80006e8 <__NVIC_SetPriority>
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b004      	add	sp, #16
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	0002      	movs	r2, r0
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ff57 	bl	80006b4 <__NVIC_EnableIRQ>
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081e:	e14f      	b.n	8000ac0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4091      	lsls	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d100      	bne.n	8000838 <HAL_GPIO_Init+0x28>
 8000836:	e140      	b.n	8000aba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d00b      	beq.n	8000858 <HAL_GPIO_Init+0x48>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d007      	beq.n	8000858 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084c:	2b11      	cmp	r3, #17
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b12      	cmp	r3, #18
 8000856:	d130      	bne.n	80008ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	409a      	lsls	r2, r3
 8000866:	0013      	movs	r3, r2
 8000868:	43da      	mvns	r2, r3
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	409a      	lsls	r2, r3
 800087a:	0013      	movs	r3, r2
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800088e:	2201      	movs	r2, #1
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	43da      	mvns	r2, r3
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	4013      	ands	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	2201      	movs	r2, #1
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	409a      	lsls	r2, r3
 80008c8:	0013      	movs	r3, r2
 80008ca:	43da      	mvns	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	409a      	lsls	r2, r3
 80008dc:	0013      	movs	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0xea>
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d123      	bne.n	8000942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	08da      	lsrs	r2, r3, #3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3208      	adds	r2, #8
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	58d3      	ldr	r3, [r2, r3]
 8000906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2207      	movs	r2, #7
 800090c:	4013      	ands	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	220f      	movs	r2, #15
 8000912:	409a      	lsls	r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	43da      	mvns	r2, r3
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	691a      	ldr	r2, [r3, #16]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2107      	movs	r1, #7
 8000926:	400b      	ands	r3, r1
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	08da      	lsrs	r2, r3, #3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3208      	adds	r2, #8
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	6939      	ldr	r1, [r7, #16]
 8000940:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	409a      	lsls	r2, r3
 8000950:	0013      	movs	r3, r2
 8000952:	43da      	mvns	r2, r3
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2203      	movs	r2, #3
 8000960:	401a      	ands	r2, r3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	055b      	lsls	r3, r3, #21
 800097e:	4013      	ands	r3, r2
 8000980:	d100      	bne.n	8000984 <HAL_GPIO_Init+0x174>
 8000982:	e09a      	b.n	8000aba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000984:	4b54      	ldr	r3, [pc, #336]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 8000986:	699a      	ldr	r2, [r3, #24]
 8000988:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 800098a:	2101      	movs	r1, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	2201      	movs	r2, #1
 8000996:	4013      	ands	r3, r2
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800099c:	4a4f      	ldr	r2, [pc, #316]	; (8000adc <HAL_GPIO_Init+0x2cc>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	589b      	ldr	r3, [r3, r2]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2203      	movs	r2, #3
 80009ae:	4013      	ands	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	409a      	lsls	r2, r3
 80009b6:	0013      	movs	r3, r2
 80009b8:	43da      	mvns	r2, r3
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	2390      	movs	r3, #144	; 0x90
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0x1e2>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a44      	ldr	r2, [pc, #272]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00d      	beq.n	80009ee <HAL_GPIO_Init+0x1de>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a43      	ldr	r2, [pc, #268]	; (8000ae4 <HAL_GPIO_Init+0x2d4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <HAL_GPIO_Init+0x1da>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a42      	ldr	r2, [pc, #264]	; (8000ae8 <HAL_GPIO_Init+0x2d8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_GPIO_Init+0x1d6>
 80009e2:	2303      	movs	r3, #3
 80009e4:	e006      	b.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009e6:	2305      	movs	r3, #5
 80009e8:	e004      	b.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009ea:	2302      	movs	r3, #2
 80009ec:	e002      	b.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009f2:	2300      	movs	r3, #0
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	2103      	movs	r1, #3
 80009f8:	400a      	ands	r2, r1
 80009fa:	0092      	lsls	r2, r2, #2
 80009fc:	4093      	lsls	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a04:	4935      	ldr	r1, [pc, #212]	; (8000adc <HAL_GPIO_Init+0x2cc>)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	025b      	lsls	r3, r3, #9
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	43da      	mvns	r2, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	029b      	lsls	r3, r3, #10
 8000a54:	4013      	ands	r3, r2
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	035b      	lsls	r3, r3, #13
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43da      	mvns	r2, r3
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	039b      	lsls	r3, r3, #14
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	40da      	lsrs	r2, r3
 8000ac8:	1e13      	subs	r3, r2, #0
 8000aca:	d000      	beq.n	8000ace <HAL_GPIO_Init+0x2be>
 8000acc:	e6a8      	b.n	8000820 <HAL_GPIO_Init+0x10>
  } 
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b006      	add	sp, #24
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000c00 	.word	0x48000c00
 8000aec:	40010400 	.word	0x40010400

08000af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	0008      	movs	r0, r1
 8000afa:	0011      	movs	r1, r2
 8000afc:	1cbb      	adds	r3, r7, #2
 8000afe:	1c02      	adds	r2, r0, #0
 8000b00:	801a      	strh	r2, [r3, #0]
 8000b02:	1c7b      	adds	r3, r7, #1
 8000b04:	1c0a      	adds	r2, r1, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b08:	1c7b      	adds	r3, r7, #1
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d004      	beq.n	8000b1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b10:	1cbb      	adds	r3, r7, #2
 8000b12:	881a      	ldrh	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b18:	e003      	b.n	8000b22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b1a:	1cbb      	adds	r3, r7, #2
 8000b1c:	881a      	ldrh	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e303      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2201      	movs	r2, #1
 8000b44:	4013      	ands	r3, r2
 8000b46:	d100      	bne.n	8000b4a <HAL_RCC_OscConfig+0x1e>
 8000b48:	e08d      	b.n	8000c66 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b4a:	4bc4      	ldr	r3, [pc, #784]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	220c      	movs	r2, #12
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d00e      	beq.n	8000b74 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b56:	4bc1      	ldr	r3, [pc, #772]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d116      	bne.n	8000b90 <HAL_RCC_OscConfig+0x64>
 8000b62:	4bbe      	ldr	r3, [pc, #760]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d10d      	bne.n	8000b90 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b74:	4bb9      	ldr	r3, [pc, #740]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	029b      	lsls	r3, r3, #10
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d100      	bne.n	8000b82 <HAL_RCC_OscConfig+0x56>
 8000b80:	e070      	b.n	8000c64 <HAL_RCC_OscConfig+0x138>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d000      	beq.n	8000b8c <HAL_RCC_OscConfig+0x60>
 8000b8a:	e06b      	b.n	8000c64 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e2da      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d107      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x7c>
 8000b98:	4bb0      	ldr	r3, [pc, #704]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4baf      	ldr	r3, [pc, #700]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e02f      	b.n	8000c08 <HAL_RCC_OscConfig+0xdc>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10c      	bne.n	8000bca <HAL_RCC_OscConfig+0x9e>
 8000bb0:	4baa      	ldr	r3, [pc, #680]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4ba9      	ldr	r3, [pc, #676]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bb6:	49aa      	ldr	r1, [pc, #680]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bb8:	400a      	ands	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	4ba7      	ldr	r3, [pc, #668]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4ba6      	ldr	r3, [pc, #664]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bc2:	49a8      	ldr	r1, [pc, #672]	; (8000e64 <HAL_RCC_OscConfig+0x338>)
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e01e      	b.n	8000c08 <HAL_RCC_OscConfig+0xdc>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d10e      	bne.n	8000bf0 <HAL_RCC_OscConfig+0xc4>
 8000bd2:	4ba2      	ldr	r3, [pc, #648]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4ba1      	ldr	r3, [pc, #644]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	02c9      	lsls	r1, r1, #11
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	4b9e      	ldr	r3, [pc, #632]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b9d      	ldr	r3, [pc, #628]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	0249      	lsls	r1, r1, #9
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e00b      	b.n	8000c08 <HAL_RCC_OscConfig+0xdc>
 8000bf0:	4b9a      	ldr	r3, [pc, #616]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b99      	ldr	r3, [pc, #612]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bf6:	499a      	ldr	r1, [pc, #616]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bf8:	400a      	ands	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	4b97      	ldr	r3, [pc, #604]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b96      	ldr	r3, [pc, #600]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000c02:	4998      	ldr	r1, [pc, #608]	; (8000e64 <HAL_RCC_OscConfig+0x338>)
 8000c04:	400a      	ands	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d014      	beq.n	8000c3a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fd46 	bl	80006a0 <HAL_GetTick>
 8000c14:	0003      	movs	r3, r0
 8000c16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c18:	e008      	b.n	8000c2c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c1a:	f7ff fd41 	bl	80006a0 <HAL_GetTick>
 8000c1e:	0002      	movs	r2, r0
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b64      	cmp	r3, #100	; 0x64
 8000c26:	d901      	bls.n	8000c2c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e28c      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2c:	4b8b      	ldr	r3, [pc, #556]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	029b      	lsls	r3, r3, #10
 8000c34:	4013      	ands	r3, r2
 8000c36:	d0f0      	beq.n	8000c1a <HAL_RCC_OscConfig+0xee>
 8000c38:	e015      	b.n	8000c66 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fd31 	bl	80006a0 <HAL_GetTick>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fd2c 	bl	80006a0 <HAL_GetTick>
 8000c48:	0002      	movs	r2, r0
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b64      	cmp	r3, #100	; 0x64
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e277      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c56:	4b81      	ldr	r3, [pc, #516]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	029b      	lsls	r3, r3, #10
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d1f0      	bne.n	8000c44 <HAL_RCC_OscConfig+0x118>
 8000c62:	e000      	b.n	8000c66 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d100      	bne.n	8000c72 <HAL_RCC_OscConfig+0x146>
 8000c70:	e069      	b.n	8000d46 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c72:	4b7a      	ldr	r3, [pc, #488]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	220c      	movs	r2, #12
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d00b      	beq.n	8000c94 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c7c:	4b77      	ldr	r3, [pc, #476]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	220c      	movs	r2, #12
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d11c      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x196>
 8000c88:	4b74      	ldr	r3, [pc, #464]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	025b      	lsls	r3, r3, #9
 8000c90:	4013      	ands	r3, r2
 8000c92:	d116      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c94:	4b71      	ldr	r3, [pc, #452]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2202      	movs	r2, #2
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d005      	beq.n	8000caa <HAL_RCC_OscConfig+0x17e>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d001      	beq.n	8000caa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e24d      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000caa:	4b6c      	ldr	r3, [pc, #432]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	22f8      	movs	r2, #248	; 0xf8
 8000cb0:	4393      	bics	r3, r2
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	00da      	lsls	r2, r3, #3
 8000cba:	4b68      	ldr	r3, [pc, #416]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc0:	e041      	b.n	8000d46 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d024      	beq.n	8000d14 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cca:	4b64      	ldr	r3, [pc, #400]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b63      	ldr	r3, [pc, #396]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fce3 	bl	80006a0 <HAL_GetTick>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fcde 	bl	80006a0 <HAL_GetTick>
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e229      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf2:	4b5a      	ldr	r3, [pc, #360]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d0f1      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfc:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	22f8      	movs	r2, #248	; 0xf8
 8000d02:	4393      	bics	r3, r2
 8000d04:	0019      	movs	r1, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	00da      	lsls	r2, r3, #3
 8000d0c:	4b53      	ldr	r3, [pc, #332]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e018      	b.n	8000d46 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d14:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b50      	ldr	r3, [pc, #320]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d20:	f7ff fcbe 	bl	80006a0 <HAL_GetTick>
 8000d24:	0003      	movs	r3, r0
 8000d26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fcb9 	bl	80006a0 <HAL_GetTick>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e204      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3c:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2202      	movs	r2, #2
 8000d42:	4013      	ands	r3, r2
 8000d44:	d1f1      	bne.n	8000d2a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d036      	beq.n	8000dbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69db      	ldr	r3, [r3, #28]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d019      	beq.n	8000d8c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d58:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5c:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d5e:	2101      	movs	r1, #1
 8000d60:	430a      	orrs	r2, r1
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d64:	f7ff fc9c 	bl	80006a0 <HAL_GetTick>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6c:	e008      	b.n	8000d80 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6e:	f7ff fc97 	bl	80006a0 <HAL_GetTick>
 8000d72:	0002      	movs	r2, r0
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e1e2      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	2202      	movs	r2, #2
 8000d86:	4013      	ands	r3, r2
 8000d88:	d0f1      	beq.n	8000d6e <HAL_RCC_OscConfig+0x242>
 8000d8a:	e018      	b.n	8000dbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d8c:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000d92:	2101      	movs	r1, #1
 8000d94:	438a      	bics	r2, r1
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d98:	f7ff fc82 	bl	80006a0 <HAL_GetTick>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da2:	f7ff fc7d 	bl	80006a0 <HAL_GetTick>
 8000da6:	0002      	movs	r2, r0
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e1c8      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2202      	movs	r2, #2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d1f1      	bne.n	8000da2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d100      	bne.n	8000dca <HAL_RCC_OscConfig+0x29e>
 8000dc8:	e0b6      	b.n	8000f38 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dca:	231f      	movs	r3, #31
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000dd4:	69da      	ldr	r2, [r3, #28]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	055b      	lsls	r3, r3, #21
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d111      	bne.n	8000e02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000de0:	69da      	ldr	r2, [r3, #28]
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0549      	lsls	r1, r1, #21
 8000de8:	430a      	orrs	r2, r1
 8000dea:	61da      	str	r2, [r3, #28]
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000dee:	69da      	ldr	r2, [r3, #28]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	055b      	lsls	r3, r3, #21
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_RCC_OscConfig+0x33c>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d11a      	bne.n	8000e44 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_RCC_OscConfig+0x33c>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_RCC_OscConfig+0x33c>)
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	0049      	lsls	r1, r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e1c:	f7ff fc40 	bl	80006a0 <HAL_GetTick>
 8000e20:	0003      	movs	r3, r0
 8000e22:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e26:	f7ff fc3b 	bl	80006a0 <HAL_GetTick>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b64      	cmp	r3, #100	; 0x64
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e186      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_RCC_OscConfig+0x33c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	d0f0      	beq.n	8000e26 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10f      	bne.n	8000e6c <HAL_RCC_OscConfig+0x340>
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000e4e:	6a1a      	ldr	r2, [r3, #32]
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	430a      	orrs	r2, r1
 8000e56:	621a      	str	r2, [r3, #32]
 8000e58:	e036      	b.n	8000ec8 <HAL_RCC_OscConfig+0x39c>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	fffeffff 	.word	0xfffeffff
 8000e64:	fffbffff 	.word	0xfffbffff
 8000e68:	40007000 	.word	0x40007000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10c      	bne.n	8000e8e <HAL_RCC_OscConfig+0x362>
 8000e74:	4bb6      	ldr	r3, [pc, #728]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000e76:	6a1a      	ldr	r2, [r3, #32]
 8000e78:	4bb5      	ldr	r3, [pc, #724]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	621a      	str	r2, [r3, #32]
 8000e80:	4bb3      	ldr	r3, [pc, #716]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000e82:	6a1a      	ldr	r2, [r3, #32]
 8000e84:	4bb2      	ldr	r3, [pc, #712]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000e86:	2104      	movs	r1, #4
 8000e88:	438a      	bics	r2, r1
 8000e8a:	621a      	str	r2, [r3, #32]
 8000e8c:	e01c      	b.n	8000ec8 <HAL_RCC_OscConfig+0x39c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b05      	cmp	r3, #5
 8000e94:	d10c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x384>
 8000e96:	4bae      	ldr	r3, [pc, #696]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000e98:	6a1a      	ldr	r2, [r3, #32]
 8000e9a:	4bad      	ldr	r3, [pc, #692]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	621a      	str	r2, [r3, #32]
 8000ea2:	4bab      	ldr	r3, [pc, #684]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000ea4:	6a1a      	ldr	r2, [r3, #32]
 8000ea6:	4baa      	ldr	r3, [pc, #680]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	621a      	str	r2, [r3, #32]
 8000eae:	e00b      	b.n	8000ec8 <HAL_RCC_OscConfig+0x39c>
 8000eb0:	4ba7      	ldr	r3, [pc, #668]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	4ba6      	ldr	r3, [pc, #664]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	438a      	bics	r2, r1
 8000eba:	621a      	str	r2, [r3, #32]
 8000ebc:	4ba4      	ldr	r3, [pc, #656]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000ebe:	6a1a      	ldr	r2, [r3, #32]
 8000ec0:	4ba3      	ldr	r3, [pc, #652]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	438a      	bics	r2, r1
 8000ec6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d014      	beq.n	8000efa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fbe6 	bl	80006a0 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	e009      	b.n	8000eee <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fbe1 	bl	80006a0 <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	4a9b      	ldr	r2, [pc, #620]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e12b      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eee:	4b98      	ldr	r3, [pc, #608]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x3ae>
 8000ef8:	e013      	b.n	8000f22 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fbd1 	bl	80006a0 <HAL_GetTick>
 8000efe:	0003      	movs	r3, r0
 8000f00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f02:	e009      	b.n	8000f18 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f04:	f7ff fbcc 	bl	80006a0 <HAL_GetTick>
 8000f08:	0002      	movs	r2, r0
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4a91      	ldr	r2, [pc, #580]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e116      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f18:	4b8d      	ldr	r3, [pc, #564]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d1f0      	bne.n	8000f04 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f22:	231f      	movs	r3, #31
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d105      	bne.n	8000f38 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2c:	4b88      	ldr	r3, [pc, #544]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f2e:	69da      	ldr	r2, [r3, #28]
 8000f30:	4b87      	ldr	r3, [pc, #540]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f32:	4989      	ldr	r1, [pc, #548]	; (8001158 <HAL_RCC_OscConfig+0x62c>)
 8000f34:	400a      	ands	r2, r1
 8000f36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d063      	beq.n	800100a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d12a      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f4a:	4b81      	ldr	r3, [pc, #516]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4e:	4b80      	ldr	r3, [pc, #512]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f50:	2104      	movs	r1, #4
 8000f52:	430a      	orrs	r2, r1
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f56:	4b7e      	ldr	r3, [pc, #504]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f5a:	4b7d      	ldr	r3, [pc, #500]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fb9d 	bl	80006a0 <HAL_GetTick>
 8000f66:	0003      	movs	r3, r0
 8000f68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f6c:	f7ff fb98 	bl	80006a0 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e0e3      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f7e:	4b74      	ldr	r3, [pc, #464]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f82:	2202      	movs	r2, #2
 8000f84:	4013      	ands	r3, r2
 8000f86:	d0f1      	beq.n	8000f6c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f88:	4b71      	ldr	r3, [pc, #452]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8c:	22f8      	movs	r2, #248	; 0xf8
 8000f8e:	4393      	bics	r3, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	00da      	lsls	r2, r3, #3
 8000f98:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9e:	e034      	b.n	800100a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	3305      	adds	r3, #5
 8000fa6:	d111      	bne.n	8000fcc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fac:	4b68      	ldr	r3, [pc, #416]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000fae:	2104      	movs	r1, #4
 8000fb0:	438a      	bics	r2, r1
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fb4:	4b66      	ldr	r3, [pc, #408]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb8:	22f8      	movs	r2, #248	; 0xf8
 8000fba:	4393      	bics	r3, r2
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	00da      	lsls	r2, r3, #3
 8000fc4:	4b62      	ldr	r3, [pc, #392]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fca:	e01e      	b.n	800100a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fcc:	4b60      	ldr	r3, [pc, #384]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd0:	4b5f      	ldr	r3, [pc, #380]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000fd8:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fdc:	4b5c      	ldr	r3, [pc, #368]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	438a      	bics	r2, r1
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fb5c 	bl	80006a0 <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fee:	f7ff fb57 	bl	80006a0 <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e0a2      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001000:	4b53      	ldr	r3, [pc, #332]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001004:	2202      	movs	r2, #2
 8001006:	4013      	ands	r3, r2
 8001008:	d1f1      	bne.n	8000fee <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d100      	bne.n	8001014 <HAL_RCC_OscConfig+0x4e8>
 8001012:	e097      	b.n	8001144 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001014:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	220c      	movs	r2, #12
 800101a:	4013      	ands	r3, r2
 800101c:	2b08      	cmp	r3, #8
 800101e:	d100      	bne.n	8001022 <HAL_RCC_OscConfig+0x4f6>
 8001020:	e06b      	b.n	80010fa <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d14c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102a:	4b49      	ldr	r3, [pc, #292]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001030:	494a      	ldr	r1, [pc, #296]	; (800115c <HAL_RCC_OscConfig+0x630>)
 8001032:	400a      	ands	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fb33 	bl	80006a0 <HAL_GetTick>
 800103a:	0003      	movs	r3, r0
 800103c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001040:	f7ff fb2e 	bl	80006a0 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e079      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	049b      	lsls	r3, r3, #18
 800105a:	4013      	ands	r3, r2
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	220f      	movs	r2, #15
 8001064:	4393      	bics	r3, r2
 8001066:	0019      	movs	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800106c:	4b38      	ldr	r3, [pc, #224]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 800106e:	430a      	orrs	r2, r1
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
 8001072:	4b37      	ldr	r3, [pc, #220]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4a3a      	ldr	r2, [pc, #232]	; (8001160 <HAL_RCC_OscConfig+0x634>)
 8001078:	4013      	ands	r3, r2
 800107a:	0019      	movs	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	431a      	orrs	r2, r3
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001088:	430a      	orrs	r2, r1
 800108a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	0449      	lsls	r1, r1, #17
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fb01 	bl	80006a0 <HAL_GetTick>
 800109e:	0003      	movs	r3, r0
 80010a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff fafc 	bl	80006a0 <HAL_GetTick>
 80010a8:	0002      	movs	r2, r0
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e047      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	049b      	lsls	r3, r3, #18
 80010be:	4013      	ands	r3, r2
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x578>
 80010c2:	e03f      	b.n	8001144 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 80010ca:	4924      	ldr	r1, [pc, #144]	; (800115c <HAL_RCC_OscConfig+0x630>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fae6 	bl	80006a0 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010da:	f7ff fae1 	bl	80006a0 <HAL_GetTick>
 80010de:	0002      	movs	r2, r0
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e02c      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	049b      	lsls	r3, r3, #18
 80010f4:	4013      	ands	r3, r2
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x5ae>
 80010f8:	e024      	b.n	8001144 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e01f      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	401a      	ands	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	429a      	cmp	r2, r3
 8001120:	d10e      	bne.n	8001140 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	220f      	movs	r2, #15
 8001126:	401a      	ands	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800112c:	429a      	cmp	r2, r3
 800112e:	d107      	bne.n	8001140 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	23f0      	movs	r3, #240	; 0xf0
 8001134:	039b      	lsls	r3, r3, #14
 8001136:	401a      	ands	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b008      	add	sp, #32
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40021000 	.word	0x40021000
 8001154:	00001388 	.word	0x00001388
 8001158:	efffffff 	.word	0xefffffff
 800115c:	feffffff 	.word	0xfeffffff
 8001160:	ffc2ffff 	.word	0xffc2ffff

08001164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0b3      	b.n	80012e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001178:	4b5b      	ldr	r3, [pc, #364]	; (80012e8 <HAL_RCC_ClockConfig+0x184>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	4013      	ands	r3, r2
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d911      	bls.n	80011aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b58      	ldr	r3, [pc, #352]	; (80012e8 <HAL_RCC_ClockConfig+0x184>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	4393      	bics	r3, r2
 800118e:	0019      	movs	r1, r3
 8001190:	4b55      	ldr	r3, [pc, #340]	; (80012e8 <HAL_RCC_ClockConfig+0x184>)
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001198:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <HAL_RCC_ClockConfig+0x184>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2201      	movs	r2, #1
 800119e:	4013      	ands	r3, r2
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e09a      	b.n	80012e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d015      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2204      	movs	r2, #4
 80011ba:	4013      	ands	r3, r2
 80011bc:	d006      	beq.n	80011cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011be:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 80011c4:	21e0      	movs	r1, #224	; 0xe0
 80011c6:	00c9      	lsls	r1, r1, #3
 80011c8:	430a      	orrs	r2, r1
 80011ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	22f0      	movs	r2, #240	; 0xf0
 80011d2:	4393      	bics	r3, r2
 80011d4:	0019      	movs	r1, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4b44      	ldr	r3, [pc, #272]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 80011dc:	430a      	orrs	r2, r1
 80011de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4013      	ands	r3, r2
 80011e8:	d040      	beq.n	800126c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	d114      	bne.n	8001228 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e06e      	b.n	80012e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120a:	4b38      	ldr	r3, [pc, #224]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	049b      	lsls	r3, r3, #18
 8001212:	4013      	ands	r3, r2
 8001214:	d108      	bne.n	8001228 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e062      	b.n	80012e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2202      	movs	r2, #2
 8001220:	4013      	ands	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e05b      	b.n	80012e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	4393      	bics	r3, r2
 8001230:	0019      	movs	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 8001238:	430a      	orrs	r2, r1
 800123a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800123c:	f7ff fa30 	bl	80006a0 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001244:	e009      	b.n	800125a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001246:	f7ff fa2b 	bl	80006a0 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <HAL_RCC_ClockConfig+0x18c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e042      	b.n	80012e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	220c      	movs	r2, #12
 8001260:	401a      	ands	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	429a      	cmp	r2, r3
 800126a:	d1ec      	bne.n	8001246 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <HAL_RCC_ClockConfig+0x184>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d211      	bcs.n	800129e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_RCC_ClockConfig+0x184>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_RCC_ClockConfig+0x184>)
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_RCC_ClockConfig+0x184>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d001      	beq.n	800129e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e020      	b.n	80012e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	4013      	ands	r3, r2
 80012a6:	d009      	beq.n	80012bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_RCC_ClockConfig+0x190>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012bc:	f000 f820 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 80012c0:	0001      	movs	r1, r0
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_RCC_ClockConfig+0x188>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	220f      	movs	r2, #15
 80012ca:	4013      	ands	r3, r2
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_RCC_ClockConfig+0x194>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	000a      	movs	r2, r1
 80012d2:	40da      	lsrs	r2, r3
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_RCC_ClockConfig+0x198>)
 80012d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff f919 	bl	8000510 <HAL_InitTick>
  
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	00001388 	.word	0x00001388
 80012f4:	fffff8ff 	.word	0xfffff8ff
 80012f8:	08003a80 	.word	0x08003a80
 80012fc:	20000000 	.word	0x20000000

08001300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b08f      	sub	sp, #60	; 0x3c
 8001304:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001306:	2314      	movs	r3, #20
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800130c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800130e:	c313      	stmia	r3!, {r0, r1, r4}
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4a29      	ldr	r2, [pc, #164]	; (80013bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001318:	ca13      	ldmia	r2!, {r0, r1, r4}
 800131a:	c313      	stmia	r3!, {r0, r1, r4}
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	220c      	movs	r2, #12
 800133e:	4013      	ands	r3, r2
 8001340:	2b04      	cmp	r3, #4
 8001342:	d002      	beq.n	800134a <HAL_RCC_GetSysClockFreq+0x4a>
 8001344:	2b08      	cmp	r3, #8
 8001346:	d003      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x50>
 8001348:	e02d      	b.n	80013a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800134e:	e02d      	b.n	80013ac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	0c9b      	lsrs	r3, r3, #18
 8001354:	220f      	movs	r2, #15
 8001356:	4013      	ands	r3, r2
 8001358:	2214      	movs	r2, #20
 800135a:	18ba      	adds	r2, r7, r2
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	220f      	movs	r2, #15
 8001366:	4013      	ands	r3, r2
 8001368:	1d3a      	adds	r2, r7, #4
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800136e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	025b      	lsls	r3, r3, #9
 8001374:	4013      	ands	r3, r2
 8001376:	d009      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800137a:	4812      	ldr	r0, [pc, #72]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800137c:	f7fe fec4 	bl	8000108 <__udivsi3>
 8001380:	0003      	movs	r3, r0
 8001382:	001a      	movs	r2, r3
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	4353      	muls	r3, r2
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
 800138a:	e009      	b.n	80013a0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800138c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138e:	000a      	movs	r2, r1
 8001390:	0152      	lsls	r2, r2, #5
 8001392:	1a52      	subs	r2, r2, r1
 8001394:	0193      	lsls	r3, r2, #6
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	185b      	adds	r3, r3, r1
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80013a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013a4:	e002      	b.n	80013ac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80013ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b00f      	add	sp, #60	; 0x3c
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	08003a58 	.word	0x08003a58
 80013bc:	08003a68 	.word	0x08003a68
 80013c0:	40021000 	.word	0x40021000
 80013c4:	007a1200 	.word	0x007a1200

080013c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	20000000 	.word	0x20000000

080013dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013e0:	f7ff fff2 	bl	80013c8 <HAL_RCC_GetHCLKFreq>
 80013e4:	0001      	movs	r1, r0
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	2207      	movs	r2, #7
 80013ee:	4013      	ands	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	40d9      	lsrs	r1, r3
 80013f6:	000b      	movs	r3, r1
}    
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40021000 	.word	0x40021000
 8001404:	08003a90 	.word	0x08003a90

08001408 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_RCC_GetClockConfig+0x4c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	401a      	ands	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_RCC_GetClockConfig+0x4c>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	22f0      	movs	r2, #240	; 0xf0
 800142a:	401a      	ands	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_RCC_GetClockConfig+0x4c>)
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	23e0      	movs	r3, #224	; 0xe0
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	401a      	ands	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_RCC_GetClockConfig+0x50>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	401a      	ands	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	40021000 	.word	0x40021000
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e01e      	b.n	80014ac <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	223d      	movs	r2, #61	; 0x3d
 8001472:	5c9b      	ldrb	r3, [r3, r2]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	223c      	movs	r2, #60	; 0x3c
 800147e:	2100      	movs	r1, #0
 8001480:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f000 f815 	bl	80014b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	223d      	movs	r2, #61	; 0x3d
 800148e:	2102      	movs	r1, #2
 8001490:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	0019      	movs	r1, r3
 800149c:	0010      	movs	r0, r2
 800149e:	f000 f969 	bl	8001774 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	223d      	movs	r2, #61	; 0x3d
 80014a6:	2101      	movs	r1, #1
 80014a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2101      	movs	r1, #1
 80014d8:	430a      	orrs	r2, r1
 80014da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2207      	movs	r2, #7
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d007      	beq.n	80014fe <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b004      	add	sp, #16
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	2b02      	cmp	r3, #2
 800151c:	d124      	bne.n	8001568 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	2b02      	cmp	r3, #2
 800152a:	d11d      	bne.n	8001568 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2203      	movs	r2, #3
 8001532:	4252      	negs	r2, r2
 8001534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2203      	movs	r2, #3
 8001544:	4013      	ands	r3, r2
 8001546:	d004      	beq.n	8001552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	0018      	movs	r0, r3
 800154c:	f000 f8fa 	bl	8001744 <HAL_TIM_IC_CaptureCallback>
 8001550:	e007      	b.n	8001562 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0018      	movs	r0, r3
 8001556:	f000 f8ed 	bl	8001734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f8f9 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2204      	movs	r2, #4
 8001570:	4013      	ands	r3, r2
 8001572:	2b04      	cmp	r3, #4
 8001574:	d125      	bne.n	80015c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2204      	movs	r2, #4
 800157e:	4013      	ands	r3, r2
 8001580:	2b04      	cmp	r3, #4
 8001582:	d11e      	bne.n	80015c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2205      	movs	r2, #5
 800158a:	4252      	negs	r2, r2
 800158c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2202      	movs	r2, #2
 8001592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d004      	beq.n	80015ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 f8cd 	bl	8001744 <HAL_TIM_IC_CaptureCallback>
 80015aa:	e007      	b.n	80015bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 f8c0 	bl	8001734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 f8cc 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2208      	movs	r2, #8
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d124      	bne.n	800161a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2208      	movs	r2, #8
 80015d8:	4013      	ands	r3, r2
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d11d      	bne.n	800161a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2209      	movs	r2, #9
 80015e4:	4252      	negs	r2, r2
 80015e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4013      	ands	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 f8a1 	bl	8001744 <HAL_TIM_IC_CaptureCallback>
 8001602:	e007      	b.n	8001614 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	0018      	movs	r0, r3
 8001608:	f000 f894 	bl	8001734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0018      	movs	r0, r3
 8001610:	f000 f8a0 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2210      	movs	r2, #16
 8001622:	4013      	ands	r3, r2
 8001624:	2b10      	cmp	r3, #16
 8001626:	d125      	bne.n	8001674 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2210      	movs	r2, #16
 8001630:	4013      	ands	r3, r2
 8001632:	2b10      	cmp	r3, #16
 8001634:	d11e      	bne.n	8001674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2211      	movs	r2, #17
 800163c:	4252      	negs	r2, r2
 800163e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2208      	movs	r2, #8
 8001644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69da      	ldr	r2, [r3, #28]
 800164c:	23c0      	movs	r3, #192	; 0xc0
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d004      	beq.n	800165e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	0018      	movs	r0, r3
 8001658:	f000 f874 	bl	8001744 <HAL_TIM_IC_CaptureCallback>
 800165c:	e007      	b.n	800166e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	0018      	movs	r0, r3
 8001662:	f000 f867 	bl	8001734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0018      	movs	r0, r3
 800166a:	f000 f873 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2201      	movs	r2, #1
 800167c:	4013      	ands	r3, r2
 800167e:	2b01      	cmp	r3, #1
 8001680:	d10f      	bne.n	80016a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2202      	movs	r2, #2
 8001696:	4252      	negs	r2, r2
 8001698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0018      	movs	r0, r3
 800169e:	f7fe fefb 	bl	8000498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	d10f      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b80      	cmp	r3, #128	; 0x80
 80016bc:	d108      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2281      	movs	r2, #129	; 0x81
 80016c4:	4252      	negs	r2, r2
 80016c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 f8c6 	bl	800185c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	4013      	ands	r3, r2
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d10f      	bne.n	80016fe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b40      	cmp	r3, #64	; 0x40
 80016ea:	d108      	bne.n	80016fe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2241      	movs	r2, #65	; 0x41
 80016f2:	4252      	negs	r2, r2
 80016f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f000 f833 	bl	8001764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2220      	movs	r2, #32
 8001706:	4013      	ands	r3, r2
 8001708:	2b20      	cmp	r3, #32
 800170a:	d10f      	bne.n	800172c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2220      	movs	r2, #32
 8001714:	4013      	ands	r3, r2
 8001716:	2b20      	cmp	r3, #32
 8001718:	d108      	bne.n	800172c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2221      	movs	r2, #33	; 0x21
 8001720:	4252      	negs	r2, r2
 8001722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 f890 	bl	800184c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b002      	add	sp, #8
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <TIM_Base_SetConfig+0xc0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d003      	beq.n	8001794 <TIM_Base_SetConfig+0x20>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a2a      	ldr	r2, [pc, #168]	; (8001838 <TIM_Base_SetConfig+0xc4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d108      	bne.n	80017a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2270      	movs	r2, #112	; 0x70
 8001798:	4393      	bics	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a22      	ldr	r2, [pc, #136]	; (8001834 <TIM_Base_SetConfig+0xc0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00f      	beq.n	80017ce <TIM_Base_SetConfig+0x5a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a21      	ldr	r2, [pc, #132]	; (8001838 <TIM_Base_SetConfig+0xc4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00b      	beq.n	80017ce <TIM_Base_SetConfig+0x5a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a20      	ldr	r2, [pc, #128]	; (800183c <TIM_Base_SetConfig+0xc8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d007      	beq.n	80017ce <TIM_Base_SetConfig+0x5a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <TIM_Base_SetConfig+0xcc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d003      	beq.n	80017ce <TIM_Base_SetConfig+0x5a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <TIM_Base_SetConfig+0xd0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d108      	bne.n	80017e0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <TIM_Base_SetConfig+0xd4>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	4393      	bics	r3, r2
 80017e6:	001a      	movs	r2, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <TIM_Base_SetConfig+0xc0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <TIM_Base_SetConfig+0xaa>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <TIM_Base_SetConfig+0xcc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d003      	beq.n	800181e <TIM_Base_SetConfig+0xaa>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <TIM_Base_SetConfig+0xd0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d103      	bne.n	8001826 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	615a      	str	r2, [r3, #20]
}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40000400 	.word	0x40000400
 800183c:	40002000 	.word	0x40002000
 8001840:	40014400 	.word	0x40014400
 8001844:	40014800 	.word	0x40014800
 8001848:	fffffcff 	.word	0xfffffcff

0800184c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}

0800186c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	0002      	movs	r2, r0
 8001874:	1dbb      	adds	r3, r7, #6
 8001876:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800187c:	1dbb      	adds	r3, r7, #6
 800187e:	2200      	movs	r2, #0
 8001880:	5e9b      	ldrsh	r3, [r3, r2]
 8001882:	2b84      	cmp	r3, #132	; 0x84
 8001884:	d006      	beq.n	8001894 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8001886:	1dbb      	adds	r3, r7, #6
 8001888:	2200      	movs	r2, #0
 800188a:	5e9a      	ldrsh	r2, [r3, r2]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	18d3      	adds	r3, r2, r3
 8001890:	3303      	adds	r3, #3
 8001892:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001894:	68fb      	ldr	r3, [r7, #12]
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bd80      	pop	{r7, pc}

0800189e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018a4:	f3ef 8305 	mrs	r3, IPSR
 80018a8:	607b      	str	r3, [r7, #4]
  return(result);
 80018aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	4193      	sbcs	r3, r2
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}

080018ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80018be:	f001 f81b 	bl	80028f8 <vTaskStartScheduler>
  
  return osOK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80018ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018cc:	b089      	sub	sp, #36	; 0x24
 80018ce:	af04      	add	r7, sp, #16
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <osThreadCreate+0x54>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01c      	beq.n	800191e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685c      	ldr	r4, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681d      	ldr	r5, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691e      	ldr	r6, [r3, #16]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2208      	movs	r2, #8
 80018f4:	5e9b      	ldrsh	r3, [r3, r2]
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7ff ffb8 	bl	800186c <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	9201      	str	r2, [sp, #4]
 800190a:	9000      	str	r0, [sp, #0]
 800190c:	000b      	movs	r3, r1
 800190e:	0032      	movs	r2, r6
 8001910:	0029      	movs	r1, r5
 8001912:	0020      	movs	r0, r4
 8001914:	f000 fe5d 	bl	80025d2 <xTaskCreateStatic>
 8001918:	0003      	movs	r3, r0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e01d      	b.n	800195a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685c      	ldr	r4, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800192a:	b29e      	uxth	r6, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2208      	movs	r2, #8
 8001930:	5e9b      	ldrsh	r3, [r3, r2]
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff ff9a 	bl	800186c <makeFreeRtosPriority>
 8001938:	0001      	movs	r1, r0
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	230c      	movs	r3, #12
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	9100      	str	r1, [sp, #0]
 8001944:	0013      	movs	r3, r2
 8001946:	0032      	movs	r2, r6
 8001948:	0029      	movs	r1, r5
 800194a:	0020      	movs	r0, r4
 800194c:	f000 fe84 	bl	8002658 <xTaskCreate>
 8001950:	0003      	movs	r3, r0
 8001952:	2b01      	cmp	r3, #1
 8001954:	d001      	beq.n	800195a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b005      	add	sp, #20
 8001962:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001964 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <osDelay+0x16>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	e000      	b.n	800197c <osDelay+0x18>
 800197a:	2301      	movs	r3, #1
 800197c:	0018      	movs	r0, r3
 800197e:	f000 ff95 	bl	80028ac <vTaskDelay>
  
  return osOK;
 8001982:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b004      	add	sp, #16
 800198a:	bd80      	pop	{r7, pc}

0800198c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	0019      	movs	r1, r3
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 fa5c 	bl	8001e60 <xQueueCreateMutexStatic>
 80019a8:	0003      	movs	r3, r0
 80019aa:	e003      	b.n	80019b4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80019ac:	2001      	movs	r0, #1
 80019ae:	f000 fa3b 	bl	8001e28 <xQueueCreateMutex>
 80019b2:	0003      	movs	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}

080019bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <osMutexWait+0x18>
    return osErrorParameter;
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	e036      	b.n	8001a42 <osMutexWait+0x86>
  }
  
  ticks = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	d103      	bne.n	80019e6 <osMutexWait+0x2a>
    ticks = portMAX_DELAY;
 80019de:	2301      	movs	r3, #1
 80019e0:	425b      	negs	r3, r3
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e009      	b.n	80019fa <osMutexWait+0x3e>
  }
  else if (millisec != 0) {
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <osMutexWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <osMutexWait+0x3e>
      ticks = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80019fa:	f7ff ff50 	bl	800189e <inHandlerMode>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d013      	beq.n	8001a2a <osMutexWait+0x6e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001a02:	2308      	movs	r3, #8
 8001a04:	18fa      	adds	r2, r7, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 fc4b 	bl	80022a6 <xQueueReceiveFromISR>
 8001a10:	0003      	movs	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d001      	beq.n	8001a1a <osMutexWait+0x5e>
      return osErrorOS;
 8001a16:	23ff      	movs	r3, #255	; 0xff
 8001a18:	e013      	b.n	8001a42 <osMutexWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00f      	beq.n	8001a40 <osMutexWait+0x84>
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <osMutexWait+0x90>)
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	0552      	lsls	r2, r2, #21
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e00a      	b.n	8001a40 <osMutexWait+0x84>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0011      	movs	r1, r2
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 fb5e 	bl	80020f2 <xQueueSemaphoreTake>
 8001a36:	0003      	movs	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d001      	beq.n	8001a40 <osMutexWait+0x84>
    return osErrorOS;
 8001a3c:	23ff      	movs	r3, #255	; 0xff
 8001a3e:	e000      	b.n	8001a42 <osMutexWait+0x86>
  }
  
  return osOK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	e000ed04 	.word	0xe000ed04

08001a50 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8001a60:	f7ff ff1d 	bl	800189e <inHandlerMode>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d013      	beq.n	8001a90 <osMutexRelease+0x40>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001a68:	2308      	movs	r3, #8
 8001a6a:	18fa      	adds	r2, r7, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 fad9 	bl	8002028 <xQueueGiveFromISR>
 8001a76:	0003      	movs	r3, r0
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d001      	beq.n	8001a80 <osMutexRelease+0x30>
      return osErrorOS;
 8001a7c:	23ff      	movs	r3, #255	; 0xff
 8001a7e:	e013      	b.n	8001aa8 <osMutexRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00f      	beq.n	8001aa6 <osMutexRelease+0x56>
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <osMutexRelease+0x60>)
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	0552      	lsls	r2, r2, #21
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e00a      	b.n	8001aa6 <osMutexRelease+0x56>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	2300      	movs	r3, #0
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	f000 fa02 	bl	8001ea0 <xQueueGenericSend>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d001      	beq.n	8001aa6 <osMutexRelease+0x56>
  {
    result = osErrorOS;
 8001aa2:	23ff      	movs	r3, #255	; 0xff
 8001aa4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b004      	add	sp, #16
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	e000ed04 	.word	0xe000ed04

08001ab4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3308      	adds	r3, #8
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4252      	negs	r2, r2
 8001acc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3308      	adds	r3, #8
 8001adc:	001a      	movs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b004      	add	sp, #16
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	d103      	bne.n	8001b68 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e00c      	b.n	8001b82 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e002      	b.n	8001b76 <vListInsert+0x2c>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d2f6      	bcs.n	8001b70 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6892      	ldr	r2, [r2, #8]
 8001bcc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6852      	ldr	r2, [r2, #4]
 8001bd6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d103      	bne.n	8001bea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <xQueueGenericReset+0x18>
 8001c1a:	b672      	cpsid	i
 8001c1c:	e7fe      	b.n	8001c1c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8001c1e:	f001 fc67 	bl	80034f0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	434b      	muls	r3, r1
 8001c30:	18d2      	adds	r2, r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	1e59      	subs	r1, r3, #1
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	434b      	muls	r3, r1
 8001c54:	18d2      	adds	r2, r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2244      	movs	r2, #68	; 0x44
 8001c5e:	21ff      	movs	r1, #255	; 0xff
 8001c60:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2245      	movs	r2, #69	; 0x45
 8001c66:	21ff      	movs	r1, #255	; 0xff
 8001c68:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f001 f845 	bl	8002d0c <xTaskRemoveFromEventList>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d00c      	beq.n	8001ca0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c86:	f001 fc23 	bl	80034d0 <vPortYield>
 8001c8a:	e009      	b.n	8001ca0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3310      	adds	r3, #16
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff ff0f 	bl	8001ab4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3324      	adds	r3, #36	; 0x24
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff ff0a 	bl	8001ab4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001ca0:	f001 fc38 	bl	8003514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b004      	add	sp, #16
 8001cac:	bd80      	pop	{r7, pc}

08001cae <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001cae:	b590      	push	{r4, r7, lr}
 8001cb0:	b089      	sub	sp, #36	; 0x24
 8001cb2:	af02      	add	r7, sp, #8
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <xQueueGenericCreateStatic+0x18>
 8001cc2:	b672      	cpsid	i
 8001cc4:	e7fe      	b.n	8001cc4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <xQueueGenericCreateStatic+0x22>
 8001ccc:	b672      	cpsid	i
 8001cce:	e7fe      	b.n	8001cce <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <xQueueGenericCreateStatic+0x2e>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <xQueueGenericCreateStatic+0x32>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <xQueueGenericCreateStatic+0x34>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <xQueueGenericCreateStatic+0x3c>
 8001ce6:	b672      	cpsid	i
 8001ce8:	e7fe      	b.n	8001ce8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <xQueueGenericCreateStatic+0x48>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <xQueueGenericCreateStatic+0x4c>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <xQueueGenericCreateStatic+0x4e>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <xQueueGenericCreateStatic+0x56>
 8001d00:	b672      	cpsid	i
 8001d02:	e7fe      	b.n	8001d02 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d04:	2348      	movs	r3, #72	; 0x48
 8001d06:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b48      	cmp	r3, #72	; 0x48
 8001d0c:	d001      	beq.n	8001d12 <xQueueGenericCreateStatic+0x64>
 8001d0e:	b672      	cpsid	i
 8001d10:	e7fe      	b.n	8001d10 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00e      	beq.n	8001d3a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2246      	movs	r2, #70	; 0x46
 8001d20:	2101      	movs	r1, #1
 8001d22:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d24:	2328      	movs	r3, #40	; 0x28
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	781c      	ldrb	r4, [r3, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	0023      	movs	r3, r4
 8001d36:	f000 f83b 	bl	8001db0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001d3a:	697b      	ldr	r3, [r7, #20]
	}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b007      	add	sp, #28
 8001d42:	bd90      	pop	{r4, r7, pc}

08001d44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b08b      	sub	sp, #44	; 0x2c
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <xQueueGenericCreate+0x18>
 8001d58:	b672      	cpsid	i
 8001d5a:	e7fe      	b.n	8001d5a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e003      	b.n	8001d70 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	4353      	muls	r3, r2
 8001d6e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	3348      	adds	r3, #72	; 0x48
 8001d74:	0018      	movs	r0, r3
 8001d76:	f001 fc53 	bl	8003620 <pvPortMalloc>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	3348      	adds	r3, #72	; 0x48
 8001d88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2246      	movs	r2, #70	; 0x46
 8001d8e:	2100      	movs	r1, #0
 8001d90:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781c      	ldrb	r4, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	0023      	movs	r3, r4
 8001da2:	f000 f805 	bl	8001db0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001da6:	69bb      	ldr	r3, [r7, #24]
	}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b009      	add	sp, #36	; 0x24
 8001dae:	bd90      	pop	{r4, r7, pc}

08001db0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	1cfb      	adds	r3, r7, #3
 8001dc0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e002      	b.n	8001dd6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2101      	movs	r1, #1
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff ff0d 	bl	8001c06 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b004      	add	sp, #16
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00e      	beq.n	8001e20 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	2300      	movs	r3, #0
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	f000 f840 	bl	8001ea0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	0002      	movs	r2, r0
 8001e30:	1dfb      	adds	r3, r7, #7
 8001e32:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001e34:	2301      	movs	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	6939      	ldr	r1, [r7, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff ff7d 	bl	8001d44 <xQueueGenericCreate>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ffcf 	bl	8001df4 <prvInitialiseMutex>

		return pxNewQueue;
 8001e56:	68fb      	ldr	r3, [r7, #12]
	}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	0002      	movs	r2, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	6939      	ldr	r1, [r7, #16]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	0013      	movs	r3, r2
 8001e84:	2200      	movs	r2, #0
 8001e86:	f7ff ff12 	bl	8001cae <xQueueGenericCreateStatic>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ffaf 	bl	8001df4 <prvInitialiseMutex>

		return pxNewQueue;
 8001e96:	68fb      	ldr	r3, [r7, #12]
	}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b006      	add	sp, #24
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <xQueueGenericSend+0x20>
 8001ebc:	b672      	cpsid	i
 8001ebe:	e7fe      	b.n	8001ebe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <xQueueGenericSend+0x2e>
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <xQueueGenericSend+0x32>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <xQueueGenericSend+0x34>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <xQueueGenericSend+0x3c>
 8001ed8:	b672      	cpsid	i
 8001eda:	e7fe      	b.n	8001eda <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d103      	bne.n	8001eea <xQueueGenericSend+0x4a>
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <xQueueGenericSend+0x4e>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <xQueueGenericSend+0x50>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <xQueueGenericSend+0x58>
 8001ef4:	b672      	cpsid	i
 8001ef6:	e7fe      	b.n	8001ef6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ef8:	f001 f8a0 	bl	800303c <xTaskGetSchedulerState>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d102      	bne.n	8001f06 <xQueueGenericSend+0x66>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <xQueueGenericSend+0x6a>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <xQueueGenericSend+0x6c>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <xQueueGenericSend+0x74>
 8001f10:	b672      	cpsid	i
 8001f12:	e7fe      	b.n	8001f12 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f14:	f001 faec 	bl	80034f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d302      	bcc.n	8001f2a <xQueueGenericSend+0x8a>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d11e      	bne.n	8001f68 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fa31 	bl	8002398 <prvCopyDataToQueue>
 8001f36:	0003      	movs	r3, r0
 8001f38:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	3324      	adds	r3, #36	; 0x24
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fee0 	bl	8002d0c <xTaskRemoveFromEventList>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d007      	beq.n	8001f60 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f50:	f001 fabe 	bl	80034d0 <vPortYield>
 8001f54:	e004      	b.n	8001f60 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001f5c:	f001 fab8 	bl	80034d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f60:	f001 fad8 	bl	8003514 <vPortExitCritical>
				return pdPASS;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e05b      	b.n	8002020 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f6e:	f001 fad1 	bl	8003514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e054      	b.n	8002020 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d106      	bne.n	8001f8a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f7c:	2314      	movs	r3, #20
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 ff1f 	bl	8002dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f8a:	f001 fac3 	bl	8003514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f8e:	f000 fd01 	bl	8002994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f92:	f001 faad 	bl	80034f0 <vPortEnterCritical>
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	2244      	movs	r2, #68	; 0x44
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	d103      	bne.n	8001faa <xQueueGenericSend+0x10a>
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	2244      	movs	r2, #68	; 0x44
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	2245      	movs	r2, #69	; 0x45
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	d103      	bne.n	8001fbe <xQueueGenericSend+0x11e>
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2245      	movs	r2, #69	; 0x45
 8001fba:	2100      	movs	r1, #0
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	f001 faa9 	bl	8003514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fc2:	1d3a      	adds	r2, r7, #4
 8001fc4:	2314      	movs	r3, #20
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	0011      	movs	r1, r2
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 ff0e 	bl	8002dec <xTaskCheckForTimeOut>
 8001fd0:	1e03      	subs	r3, r0, #0
 8001fd2:	d11e      	bne.n	8002012 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f000 fae3 	bl	80025a2 <prvIsQueueFull>
 8001fdc:	1e03      	subs	r3, r0, #0
 8001fde:	d011      	beq.n	8002004 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	3310      	adds	r3, #16
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	0011      	movs	r1, r2
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 fe71 	bl	8002cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 fa62 	bl	80024ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001ff6:	f000 fcd9 	bl	80029ac <xTaskResumeAll>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d18a      	bne.n	8001f14 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8001ffe:	f001 fa67 	bl	80034d0 <vPortYield>
 8002002:	e787      	b.n	8001f14 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	0018      	movs	r0, r3
 8002008:	f000 fa57 	bl	80024ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800200c:	f000 fcce 	bl	80029ac <xTaskResumeAll>
 8002010:	e780      	b.n	8001f14 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	0018      	movs	r0, r3
 8002016:	f000 fa50 	bl	80024ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800201a:	f000 fcc7 	bl	80029ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800201e:	2300      	movs	r3, #0
		}
	}
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b00a      	add	sp, #40	; 0x28
 8002026:	bd80      	pop	{r7, pc}

08002028 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <xQueueGiveFromISR+0x18>
 800203c:	b672      	cpsid	i
 800203e:	e7fe      	b.n	800203e <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <xQueueGiveFromISR+0x24>
 8002048:	b672      	cpsid	i
 800204a:	e7fe      	b.n	800204a <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d103      	bne.n	800205c <xQueueGiveFromISR+0x34>
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <xQueueGiveFromISR+0x38>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <xQueueGiveFromISR+0x3a>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <xQueueGiveFromISR+0x42>
 8002066:	b672      	cpsid	i
 8002068:	e7fe      	b.n	8002068 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800206a:	f001 fa6b 	bl	8003544 <ulSetInterruptMaskFromISR>
 800206e:	0003      	movs	r3, r0
 8002070:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	429a      	cmp	r2, r3
 8002080:	d22c      	bcs.n	80020dc <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002082:	200f      	movs	r0, #15
 8002084:	183b      	adds	r3, r7, r0
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	2145      	movs	r1, #69	; 0x45
 800208a:	5c52      	ldrb	r2, [r2, r1]
 800208c:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002096:	183b      	adds	r3, r7, r0
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b25b      	sxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	d111      	bne.n	80020c4 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	3324      	adds	r3, #36	; 0x24
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fe2d 	bl	8002d0c <xTaskRemoveFromEventList>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d00f      	beq.n	80020d6 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00c      	beq.n	80020d6 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e008      	b.n	80020d6 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	b259      	sxtb	r1, r3
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2245      	movs	r2, #69	; 0x45
 80020d4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e001      	b.n	80020e0 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f001 fa34 	bl	8003550 <vClearInterruptMaskFromISR>

	return xReturn;
 80020e8:	69fb      	ldr	r3, [r7, #28]
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b008      	add	sp, #32
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b08a      	sub	sp, #40	; 0x28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <xQueueSemaphoreTake+0x20>
 800210e:	b672      	cpsid	i
 8002110:	e7fe      	b.n	8002110 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <xQueueSemaphoreTake+0x2c>
 800211a:	b672      	cpsid	i
 800211c:	e7fe      	b.n	800211c <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800211e:	f000 ff8d 	bl	800303c <xTaskGetSchedulerState>
 8002122:	1e03      	subs	r3, r0, #0
 8002124:	d102      	bne.n	800212c <xQueueSemaphoreTake+0x3a>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <xQueueSemaphoreTake+0x3e>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <xQueueSemaphoreTake+0x40>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <xQueueSemaphoreTake+0x48>
 8002136:	b672      	cpsid	i
 8002138:	e7fe      	b.n	8002138 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800213a:	f001 f9d9 	bl	80034f0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01d      	beq.n	8002186 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d104      	bne.n	8002164 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800215a:	f001 f8c9 	bl	80032f0 <pvTaskIncrementMutexHeldCount>
 800215e:	0002      	movs	r2, r0
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	3310      	adds	r3, #16
 8002170:	0018      	movs	r0, r3
 8002172:	f000 fdcb 	bl	8002d0c <xTaskRemoveFromEventList>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d001      	beq.n	800217e <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800217a:	f001 f9a9 	bl	80034d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800217e:	f001 f9c9 	bl	8003514 <vPortExitCritical>
				return pdPASS;
 8002182:	2301      	movs	r3, #1
 8002184:	e08b      	b.n	800229e <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d108      	bne.n	800219e <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <xQueueSemaphoreTake+0xa4>
 8002192:	b672      	cpsid	i
 8002194:	e7fe      	b.n	8002194 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002196:	f001 f9bd 	bl	8003514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800219a:	2300      	movs	r3, #0
 800219c:	e07f      	b.n	800229e <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021a4:	230c      	movs	r3, #12
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 fe0b 	bl	8002dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021b2:	f001 f9af 	bl	8003514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021b6:	f000 fbed 	bl	8002994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021ba:	f001 f999 	bl	80034f0 <vPortEnterCritical>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2244      	movs	r2, #68	; 0x44
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	d103      	bne.n	80021d2 <xQueueSemaphoreTake+0xe0>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	2244      	movs	r2, #68	; 0x44
 80021ce:	2100      	movs	r1, #0
 80021d0:	5499      	strb	r1, [r3, r2]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	2245      	movs	r2, #69	; 0x45
 80021d6:	5c9b      	ldrb	r3, [r3, r2]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	d103      	bne.n	80021e6 <xQueueSemaphoreTake+0xf4>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2245      	movs	r2, #69	; 0x45
 80021e2:	2100      	movs	r1, #0
 80021e4:	5499      	strb	r1, [r3, r2]
 80021e6:	f001 f995 	bl	8003514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021ea:	003a      	movs	r2, r7
 80021ec:	230c      	movs	r3, #12
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	0011      	movs	r1, r2
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 fdfa 	bl	8002dec <xTaskCheckForTimeOut>
 80021f8:	1e03      	subs	r3, r0, #0
 80021fa:	d12e      	bne.n	800225a <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 f9b9 	bl	8002576 <prvIsQueueEmpty>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d021      	beq.n	800224c <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10a      	bne.n	8002226 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8002210:	f001 f96e 	bl	80034f0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 ff2b 	bl	8003074 <xTaskPriorityInherit>
 800221e:	0003      	movs	r3, r0
 8002220:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8002222:	f001 f977 	bl	8003514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3324      	adds	r3, #36	; 0x24
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	0011      	movs	r1, r2
 800222e:	0018      	movs	r0, r3
 8002230:	f000 fd4e 	bl	8002cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 f93f 	bl	80024ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800223c:	f000 fbb6 	bl	80029ac <xTaskResumeAll>
 8002240:	1e03      	subs	r3, r0, #0
 8002242:	d000      	beq.n	8002246 <xQueueSemaphoreTake+0x154>
 8002244:	e779      	b.n	800213a <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8002246:	f001 f943 	bl	80034d0 <vPortYield>
 800224a:	e776      	b.n	800213a <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f933 	bl	80024ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002254:	f000 fbaa 	bl	80029ac <xTaskResumeAll>
 8002258:	e76f      	b.n	800213a <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f92c 	bl	80024ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002262:	f000 fba3 	bl	80029ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	0018      	movs	r0, r3
 800226a:	f000 f984 	bl	8002576 <prvIsQueueEmpty>
 800226e:	1e03      	subs	r3, r0, #0
 8002270:	d100      	bne.n	8002274 <xQueueSemaphoreTake+0x182>
 8002272:	e762      	b.n	800213a <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800227a:	f001 f939 	bl	80034f0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 f873 	bl	800236c <prvGetDisinheritPriorityAfterTimeout>
 8002286:	0003      	movs	r3, r0
 8002288:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	0011      	movs	r1, r2
 8002292:	0018      	movs	r0, r3
 8002294:	f000 ffb8 	bl	8003208 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002298:	f001 f93c 	bl	8003514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800229c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b00a      	add	sp, #40	; 0x28
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80022a6:	b590      	push	{r4, r7, lr}
 80022a8:	b08b      	sub	sp, #44	; 0x2c
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <xQueueReceiveFromISR+0x1a>
 80022bc:	b672      	cpsid	i
 80022be:	e7fe      	b.n	80022be <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d103      	bne.n	80022ce <xQueueReceiveFromISR+0x28>
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <xQueueReceiveFromISR+0x2c>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <xQueueReceiveFromISR+0x2e>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <xQueueReceiveFromISR+0x36>
 80022d8:	b672      	cpsid	i
 80022da:	e7fe      	b.n	80022da <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022dc:	f001 f932 	bl	8003544 <ulSetInterruptMaskFromISR>
 80022e0:	0003      	movs	r3, r0
 80022e2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d032      	beq.n	8002356 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80022f0:	2417      	movs	r4, #23
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	6a3a      	ldr	r2, [r7, #32]
 80022f6:	2144      	movs	r1, #68	; 0x44
 80022f8:	5c52      	ldrb	r2, [r2, r1]
 80022fa:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	0011      	movs	r1, r2
 8002302:	0018      	movs	r0, r3
 8002304:	f000 f8b3 	bl	800246e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	1e5a      	subs	r2, r3, #1
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002310:	193b      	adds	r3, r7, r4
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	3301      	adds	r3, #1
 8002318:	d111      	bne.n	800233e <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	3310      	adds	r3, #16
 8002326:	0018      	movs	r0, r3
 8002328:	f000 fcf0 	bl	8002d0c <xTaskRemoveFromEventList>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d00f      	beq.n	8002350 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e008      	b.n	8002350 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800233e:	2317      	movs	r3, #23
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	b259      	sxtb	r1, r3
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2244      	movs	r2, #68	; 0x44
 800234e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002350:	2301      	movs	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	e001      	b.n	800235a <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	0018      	movs	r0, r3
 800235e:	f001 f8f7 	bl	8003550 <vClearInterruptMaskFromISR>

	return xReturn;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b00b      	add	sp, #44	; 0x2c
 800236a:	bd90      	pop	{r4, r7, pc}

0800236c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2207      	movs	r2, #7
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e001      	b.n	800238e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800238e:	68fb      	ldr	r3, [r7, #12]
	}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bd80      	pop	{r7, pc}

08002398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10e      	bne.n	80023d4 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d14e      	bne.n	800245c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 fec4 	bl	8003150 <xTaskPriorityDisinherit>
 80023c8:	0003      	movs	r3, r0
 80023ca:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	e043      	b.n	800245c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d119      	bne.n	800240e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6898      	ldr	r0, [r3, #8]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	0019      	movs	r1, r3
 80023e6:	f001 fae5 	bl	80039b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	18d2      	adds	r2, r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	d32b      	bcc.n	800245c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e026      	b.n	800245c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68d8      	ldr	r0, [r3, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	0019      	movs	r1, r3
 800241a:	f001 facb 	bl	80039b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	425b      	negs	r3, r3
 8002428:	18d2      	adds	r2, r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d207      	bcs.n	800244a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	425b      	negs	r3, r3
 8002444:	18d2      	adds	r2, r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d105      	bne.n	800245c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	3b01      	subs	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002464:	697b      	ldr	r3, [r7, #20]
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b006      	add	sp, #24
 800246c:	bd80      	pop	{r7, pc}

0800246e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d018      	beq.n	80024b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	18d2      	adds	r2, r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d303      	bcc.n	80024a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68d9      	ldr	r1, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f001 fa81 	bl	80039b4 <memcpy>
	}
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b002      	add	sp, #8
 80024b8:	bd80      	pop	{r7, pc}

080024ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80024c2:	f001 f815 	bl	80034f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80024c6:	230f      	movs	r3, #15
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	2145      	movs	r1, #69	; 0x45
 80024ce:	5c52      	ldrb	r2, [r2, r1]
 80024d0:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024d2:	e013      	b.n	80024fc <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d016      	beq.n	800250a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3324      	adds	r3, #36	; 0x24
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fc13 	bl	8002d0c <xTaskRemoveFromEventList>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d001      	beq.n	80024ee <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80024ea:	f000 fccf 	bl	8002e8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80024ee:	210f      	movs	r1, #15
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b25b      	sxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	dce5      	bgt.n	80024d4 <prvUnlockQueue+0x1a>
 8002508:	e000      	b.n	800250c <prvUnlockQueue+0x52>
					break;
 800250a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2245      	movs	r2, #69	; 0x45
 8002510:	21ff      	movs	r1, #255	; 0xff
 8002512:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002514:	f000 fffe 	bl	8003514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002518:	f000 ffea 	bl	80034f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800251c:	230e      	movs	r3, #14
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	2144      	movs	r1, #68	; 0x44
 8002524:	5c52      	ldrb	r2, [r2, r1]
 8002526:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002528:	e013      	b.n	8002552 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d016      	beq.n	8002560 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3310      	adds	r3, #16
 8002536:	0018      	movs	r0, r3
 8002538:	f000 fbe8 	bl	8002d0c <xTaskRemoveFromEventList>
 800253c:	1e03      	subs	r3, r0, #0
 800253e:	d001      	beq.n	8002544 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002540:	f000 fca4 	bl	8002e8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002544:	210e      	movs	r1, #14
 8002546:	187b      	adds	r3, r7, r1
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	187b      	adds	r3, r7, r1
 8002550:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002552:	230e      	movs	r3, #14
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b25b      	sxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	dce5      	bgt.n	800252a <prvUnlockQueue+0x70>
 800255e:	e000      	b.n	8002562 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002560:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2244      	movs	r2, #68	; 0x44
 8002566:	21ff      	movs	r1, #255	; 0xff
 8002568:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800256a:	f000 ffd3 	bl	8003514 <vPortExitCritical>
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}

08002576 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800257e:	f000 ffb7 	bl	80034f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800258a:	2301      	movs	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e001      	b.n	8002594 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002594:	f000 ffbe 	bl	8003514 <vPortExitCritical>

	return xReturn;
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025aa:	f000 ffa1 	bl	80034f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d102      	bne.n	80025c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e001      	b.n	80025c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025c4:	f000 ffa6 	bl	8003514 <vPortExitCritical>

	return xReturn;
 80025c8:	68fb      	ldr	r3, [r7, #12]
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025d2:	b590      	push	{r4, r7, lr}
 80025d4:	b08d      	sub	sp, #52	; 0x34
 80025d6:	af04      	add	r7, sp, #16
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <xTaskCreateStatic+0x18>
 80025e6:	b672      	cpsid	i
 80025e8:	e7fe      	b.n	80025e8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <xTaskCreateStatic+0x22>
 80025f0:	b672      	cpsid	i
 80025f2:	e7fe      	b.n	80025f2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80025f4:	2354      	movs	r3, #84	; 0x54
 80025f6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b54      	cmp	r3, #84	; 0x54
 80025fc:	d001      	beq.n	8002602 <xTaskCreateStatic+0x30>
 80025fe:	b672      	cpsid	i
 8002600:	e7fe      	b.n	8002600 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <xTaskCreateStatic+0x78>
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01d      	beq.n	800264a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002610:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002616:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2251      	movs	r2, #81	; 0x51
 800261c:	2102      	movs	r1, #2
 800261e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002620:	683c      	ldr	r4, [r7, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	2300      	movs	r3, #0
 800262a:	9303      	str	r3, [sp, #12]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	2318      	movs	r3, #24
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	0023      	movs	r3, r4
 800263c:	f000 f858 	bl	80026f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	0018      	movs	r0, r3
 8002644:	f000 f8ce 	bl	80027e4 <prvAddNewTaskToReadyList>
 8002648:	e001      	b.n	800264e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800264e:	69bb      	ldr	r3, [r7, #24]
	}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b009      	add	sp, #36	; 0x24
 8002656:	bd90      	pop	{r4, r7, pc}

08002658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b08d      	sub	sp, #52	; 0x34
 800265c:	af04      	add	r7, sp, #16
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	1dbb      	adds	r3, r7, #6
 8002666:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002668:	1dbb      	adds	r3, r7, #6
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	0018      	movs	r0, r3
 8002670:	f000 ffd6 	bl	8003620 <pvPortMalloc>
 8002674:	0003      	movs	r3, r0
 8002676:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800267e:	2054      	movs	r0, #84	; 0x54
 8002680:	f000 ffce 	bl	8003620 <pvPortMalloc>
 8002684:	0003      	movs	r3, r0
 8002686:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
 8002694:	e006      	b.n	80026a4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	0018      	movs	r0, r3
 800269a:	f001 f867 	bl	800376c <vPortFree>
 800269e:	e001      	b.n	80026a4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01a      	beq.n	80026e0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2251      	movs	r2, #81	; 0x51
 80026ae:	2100      	movs	r1, #0
 80026b0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026b2:	1dbb      	adds	r3, r7, #6
 80026b4:	881a      	ldrh	r2, [r3, #0]
 80026b6:	683c      	ldr	r4, [r7, #0]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	2300      	movs	r3, #0
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	0023      	movs	r3, r4
 80026ce:	f000 f80f 	bl	80026f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f885 	bl	80027e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e002      	b.n	80026e6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026e0:	2301      	movs	r3, #1
 80026e2:	425b      	negs	r3, r3
 80026e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026e6:	69bb      	ldr	r3, [r7, #24]
	}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b009      	add	sp, #36	; 0x24
 80026ee:	bd90      	pop	{r4, r7, pc}

080026f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4936      	ldr	r1, [pc, #216]	; (80027e0 <prvInitialiseNewTask+0xf0>)
 8002706:	468c      	mov	ip, r1
 8002708:	4463      	add	r3, ip
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	18d3      	adds	r3, r2, r3
 800270e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2207      	movs	r2, #7
 8002714:	4393      	bics	r3, r2
 8002716:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2207      	movs	r2, #7
 800271c:	4013      	ands	r3, r2
 800271e:	d001      	beq.n	8002724 <prvInitialiseNewTask+0x34>
 8002720:	b672      	cpsid	i
 8002722:	e7fe      	b.n	8002722 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e013      	b.n	8002752 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	18d3      	adds	r3, r2, r3
 8002730:	7818      	ldrb	r0, [r3, #0]
 8002732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002734:	2134      	movs	r1, #52	; 0x34
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	18d3      	adds	r3, r2, r3
 800273a:	185b      	adds	r3, r3, r1
 800273c:	1c02      	adds	r2, r0, #0
 800273e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	18d3      	adds	r3, r2, r3
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3301      	adds	r3, #1
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d9e8      	bls.n	800272a <prvInitialiseNewTask+0x3a>
 8002758:	e000      	b.n	800275c <prvInitialiseNewTask+0x6c>
		{
			break;
 800275a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	2243      	movs	r2, #67	; 0x43
 8002760:	2100      	movs	r1, #0
 8002762:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	2b06      	cmp	r3, #6
 8002768:	d901      	bls.n	800276e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800276a:	2306      	movs	r3, #6
 800276c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	6a3a      	ldr	r2, [r7, #32]
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	2200      	movs	r2, #0
 800277e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	3304      	adds	r3, #4
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff f9b3 	bl	8001af0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	3318      	adds	r3, #24
 800278e:	0018      	movs	r0, r3
 8002790:	f7ff f9ae 	bl	8001af0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002798:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	2207      	movs	r2, #7
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	2200      	movs	r2, #0
 80027ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	2250      	movs	r2, #80	; 0x50
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 fdfc 	bl	80033bc <pxPortInitialiseStack>
 80027c4:	0002      	movs	r2, r0
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b006      	add	sp, #24
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	3fffffff 	.word	0x3fffffff

080027e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027ec:	f000 fe80 	bl	80034f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <prvAddNewTaskToReadyList+0xb0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4b27      	ldr	r3, [pc, #156]	; (8002894 <prvAddNewTaskToReadyList+0xb0>)
 80027f8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <prvAddNewTaskToReadyList+0xb4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <prvAddNewTaskToReadyList+0xb4>)
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <prvAddNewTaskToReadyList+0xb0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d110      	bne.n	8002832 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002810:	f000 fb56 	bl	8002ec0 <prvInitialiseTaskLists>
 8002814:	e00d      	b.n	8002832 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <prvAddNewTaskToReadyList+0xb8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <prvAddNewTaskToReadyList+0xb4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d802      	bhi.n	8002832 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <prvAddNewTaskToReadyList+0xb4>)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <prvAddNewTaskToReadyList+0xbc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <prvAddNewTaskToReadyList+0xbc>)
 800283a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <prvAddNewTaskToReadyList+0xc0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d903      	bls.n	8002850 <prvAddNewTaskToReadyList+0x6c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284c:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <prvAddNewTaskToReadyList+0xc0>)
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	0013      	movs	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	189b      	adds	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <prvAddNewTaskToReadyList+0xc4>)
 800285e:	189a      	adds	r2, r3, r2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	0019      	movs	r1, r3
 8002866:	0010      	movs	r0, r2
 8002868:	f7ff f94d 	bl	8001b06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800286c:	f000 fe52 	bl	8003514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <prvAddNewTaskToReadyList+0xb8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <prvAddNewTaskToReadyList+0xb4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	429a      	cmp	r2, r3
 8002884:	d201      	bcs.n	800288a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002886:	f000 fe23 	bl	80034d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	200002fc 	.word	0x200002fc
 8002898:	200001fc 	.word	0x200001fc
 800289c:	20000308 	.word	0x20000308
 80028a0:	20000318 	.word	0x20000318
 80028a4:	20000304 	.word	0x20000304
 80028a8:	20000200 	.word	0x20000200

080028ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d010      	beq.n	80028e0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <vTaskDelay+0x48>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <vTaskDelay+0x1e>
 80028c6:	b672      	cpsid	i
 80028c8:	e7fe      	b.n	80028c8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80028ca:	f000 f863 	bl	8002994 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2100      	movs	r1, #0
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 fd1e 	bl	8003314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80028d8:	f000 f868 	bl	80029ac <xTaskResumeAll>
 80028dc:	0003      	movs	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80028e6:	f000 fdf3 	bl	80034d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	20000324 	.word	0x20000324

080028f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002906:	003a      	movs	r2, r7
 8002908:	1d39      	adds	r1, r7, #4
 800290a:	2308      	movs	r3, #8
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	0018      	movs	r0, r3
 8002910:	f7fd fc86 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002914:	683c      	ldr	r4, [r7, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	4918      	ldr	r1, [pc, #96]	; (800297c <vTaskStartScheduler+0x84>)
 800291c:	4818      	ldr	r0, [pc, #96]	; (8002980 <vTaskStartScheduler+0x88>)
 800291e:	9202      	str	r2, [sp, #8]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2300      	movs	r3, #0
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2300      	movs	r3, #0
 8002928:	0022      	movs	r2, r4
 800292a:	f7ff fe52 	bl	80025d2 <xTaskCreateStatic>
 800292e:	0002      	movs	r2, r0
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <vTaskStartScheduler+0x8c>)
 8002932:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <vTaskStartScheduler+0x8c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800293c:	2301      	movs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e001      	b.n	8002946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10d      	bne.n	8002968 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800294c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <vTaskStartScheduler+0x90>)
 8002950:	2201      	movs	r2, #1
 8002952:	4252      	negs	r2, r2
 8002954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <vTaskStartScheduler+0x94>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <vTaskStartScheduler+0x98>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002962:	f000 fd91 	bl	8003488 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002966:	e004      	b.n	8002972 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3301      	adds	r3, #1
 800296c:	d101      	bne.n	8002972 <vTaskStartScheduler+0x7a>
 800296e:	b672      	cpsid	i
 8002970:	e7fe      	b.n	8002970 <vTaskStartScheduler+0x78>
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b005      	add	sp, #20
 8002978:	bd90      	pop	{r4, r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	08003a78 	.word	0x08003a78
 8002980:	08002ea1 	.word	0x08002ea1
 8002984:	20000320 	.word	0x20000320
 8002988:	2000031c 	.word	0x2000031c
 800298c:	20000308 	.word	0x20000308
 8002990:	20000300 	.word	0x20000300

08002994 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <vTaskSuspendAll+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	4b02      	ldr	r3, [pc, #8]	; (80029a8 <vTaskSuspendAll+0x14>)
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000324 	.word	0x20000324

080029ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029ba:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <xTaskResumeAll+0xf8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <xTaskResumeAll+0x1a>
 80029c2:	b672      	cpsid	i
 80029c4:	e7fe      	b.n	80029c4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029c6:	f000 fd93 	bl	80034f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <xTaskResumeAll+0xf8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1e5a      	subs	r2, r3, #1
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <xTaskResumeAll+0xf8>)
 80029d2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <xTaskResumeAll+0xf8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d15b      	bne.n	8002a94 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <xTaskResumeAll+0xfc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d057      	beq.n	8002a94 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029e4:	e02f      	b.n	8002a46 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <xTaskResumeAll+0x100>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3318      	adds	r3, #24
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7ff f8df 	bl	8001bb6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3304      	adds	r3, #4
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7ff f8da 	bl	8001bb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <xTaskResumeAll+0x104>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d903      	bls.n	8002a16 <xTaskResumeAll+0x6a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <xTaskResumeAll+0x104>)
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1a:	0013      	movs	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <xTaskResumeAll+0x108>)
 8002a24:	189a      	adds	r2, r3, r2
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	0010      	movs	r0, r2
 8002a2e:	f7ff f86a 	bl	8001b06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <xTaskResumeAll+0x10c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <xTaskResumeAll+0x110>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <xTaskResumeAll+0x100>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1cb      	bne.n	80029e6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a54:	f000 face 	bl	8002ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <xTaskResumeAll+0x114>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00f      	beq.n	8002a84 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a64:	f000 f82e 	bl	8002ac4 <xTaskIncrementTick>
 8002a68:	1e03      	subs	r3, r0, #0
 8002a6a:	d002      	beq.n	8002a72 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <xTaskResumeAll+0x110>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f2      	bne.n	8002a64 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <xTaskResumeAll+0x114>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <xTaskResumeAll+0x110>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a90:	f000 fd1e 	bl	80034d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a94:	f000 fd3e 	bl	8003514 <vPortExitCritical>

	return xAlreadyYielded;
 8002a98:	68bb      	ldr	r3, [r7, #8]
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b004      	add	sp, #16
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	20000324 	.word	0x20000324
 8002aa8:	200002fc 	.word	0x200002fc
 8002aac:	200002bc 	.word	0x200002bc
 8002ab0:	20000304 	.word	0x20000304
 8002ab4:	20000200 	.word	0x20000200
 8002ab8:	200001fc 	.word	0x200001fc
 8002abc:	20000310 	.word	0x20000310
 8002ac0:	2000030c 	.word	0x2000030c

08002ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ace:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <xTaskIncrementTick+0x13c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d000      	beq.n	8002ad8 <xTaskIncrementTick+0x14>
 8002ad6:	e083      	b.n	8002be0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ad8:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <xTaskIncrementTick+0x140>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ae0:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <xTaskIncrementTick+0x140>)
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d117      	bne.n	8002b1c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <xTaskIncrementTick+0x144>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <xTaskIncrementTick+0x36>
 8002af6:	b672      	cpsid	i
 8002af8:	e7fe      	b.n	8002af8 <xTaskIncrementTick+0x34>
 8002afa:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <xTaskIncrementTick+0x144>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <xTaskIncrementTick+0x148>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <xTaskIncrementTick+0x144>)
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <xTaskIncrementTick+0x148>)
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <xTaskIncrementTick+0x14c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <xTaskIncrementTick+0x14c>)
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	f000 fa6c 	bl	8002ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b1c:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <xTaskIncrementTick+0x150>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d34e      	bcc.n	8002bc4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b26:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <xTaskIncrementTick+0x144>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <xTaskIncrementTick+0x70>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <xTaskIncrementTick+0x72>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <xTaskIncrementTick+0x150>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	4252      	negs	r2, r2
 8002b40:	601a      	str	r2, [r3, #0]
					break;
 8002b42:	e03f      	b.n	8002bc4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <xTaskIncrementTick+0x144>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d203      	bcs.n	8002b64 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <xTaskIncrementTick+0x150>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
						break;
 8002b62:	e02f      	b.n	8002bc4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	3304      	adds	r3, #4
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7ff f824 	bl	8001bb6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3318      	adds	r3, #24
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff f81b 	bl	8001bb6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <xTaskIncrementTick+0x154>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d903      	bls.n	8002b94 <xTaskIncrementTick+0xd0>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <xTaskIncrementTick+0x154>)
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	0013      	movs	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <xTaskIncrementTick+0x158>)
 8002ba2:	189a      	adds	r2, r3, r2
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	0019      	movs	r1, r3
 8002baa:	0010      	movs	r0, r2
 8002bac:	f7fe ffab 	bl	8001b06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <xTaskIncrementTick+0x15c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d3b3      	bcc.n	8002b26 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bc2:	e7b0      	b.n	8002b26 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <xTaskIncrementTick+0x15c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	4914      	ldr	r1, [pc, #80]	; (8002c1c <xTaskIncrementTick+0x158>)
 8002bcc:	0013      	movs	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	585b      	ldr	r3, [r3, r1]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d907      	bls.n	8002bea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e004      	b.n	8002bea <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <xTaskIncrementTick+0x160>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <xTaskIncrementTick+0x160>)
 8002be8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <xTaskIncrementTick+0x164>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002bf6:	697b      	ldr	r3, [r7, #20]
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b006      	add	sp, #24
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000324 	.word	0x20000324
 8002c04:	20000300 	.word	0x20000300
 8002c08:	200002b4 	.word	0x200002b4
 8002c0c:	200002b8 	.word	0x200002b8
 8002c10:	20000314 	.word	0x20000314
 8002c14:	2000031c 	.word	0x2000031c
 8002c18:	20000304 	.word	0x20000304
 8002c1c:	20000200 	.word	0x20000200
 8002c20:	200001fc 	.word	0x200001fc
 8002c24:	2000030c 	.word	0x2000030c
 8002c28:	20000310 	.word	0x20000310

08002c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <vTaskSwitchContext+0x90>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <vTaskSwitchContext+0x94>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c40:	e037      	b.n	8002cb2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <vTaskSwitchContext+0x94>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <vTaskSwitchContext+0x98>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	e007      	b.n	8002c60 <vTaskSwitchContext+0x34>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <vTaskSwitchContext+0x2e>
 8002c56:	b672      	cpsid	i
 8002c58:	e7fe      	b.n	8002c58 <vTaskSwitchContext+0x2c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	4919      	ldr	r1, [pc, #100]	; (8002cc8 <vTaskSwitchContext+0x9c>)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	0013      	movs	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	585b      	ldr	r3, [r3, r1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ee      	beq.n	8002c50 <vTaskSwitchContext+0x24>
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	0013      	movs	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <vTaskSwitchContext+0x9c>)
 8002c7e:	189b      	adds	r3, r3, r2
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	3308      	adds	r3, #8
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d104      	bne.n	8002ca2 <vTaskSwitchContext+0x76>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <vTaskSwitchContext+0xa0>)
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <vTaskSwitchContext+0x98>)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b002      	add	sp, #8
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	20000324 	.word	0x20000324
 8002cc0:	20000310 	.word	0x20000310
 8002cc4:	20000304 	.word	0x20000304
 8002cc8:	20000200 	.word	0x20000200
 8002ccc:	200001fc 	.word	0x200001fc

08002cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <vTaskPlaceOnEventList+0x14>
 8002ce0:	b672      	cpsid	i
 8002ce2:	e7fe      	b.n	8002ce2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <vTaskPlaceOnEventList+0x38>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3318      	adds	r3, #24
 8002cea:	001a      	movs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0011      	movs	r1, r2
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fe ff2a 	bl	8001b4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 fb0a 	bl	8003314 <prvAddCurrentTaskToDelayedList>
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200001fc 	.word	0x200001fc

08002d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <xTaskRemoveFromEventList+0x1a>
 8002d22:	b672      	cpsid	i
 8002d24:	e7fe      	b.n	8002d24 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3318      	adds	r3, #24
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7fe ff43 	bl	8001bb6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d30:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <xTaskRemoveFromEventList+0xa0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11d      	bne.n	8002d74 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7fe ff3a 	bl	8001bb6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <xTaskRemoveFromEventList+0xa4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d903      	bls.n	8002d56 <xTaskRemoveFromEventList+0x4a>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <xTaskRemoveFromEventList+0xa4>)
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	0013      	movs	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <xTaskRemoveFromEventList+0xa8>)
 8002d64:	189a      	adds	r2, r3, r2
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	0010      	movs	r0, r2
 8002d6e:	f7fe feca 	bl	8001b06 <vListInsertEnd>
 8002d72:	e007      	b.n	8002d84 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3318      	adds	r3, #24
 8002d78:	001a      	movs	r2, r3
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <xTaskRemoveFromEventList+0xac>)
 8002d7c:	0011      	movs	r1, r2
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7fe fec1 	bl	8001b06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <xTaskRemoveFromEventList+0xb0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d905      	bls.n	8002d9e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d92:	2301      	movs	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <xTaskRemoveFromEventList+0xb4>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e001      	b.n	8002da2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002da2:	68fb      	ldr	r3, [r7, #12]
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000324 	.word	0x20000324
 8002db0:	20000304 	.word	0x20000304
 8002db4:	20000200 	.word	0x20000200
 8002db8:	200002bc 	.word	0x200002bc
 8002dbc:	200001fc 	.word	0x200001fc
 8002dc0:	20000310 	.word	0x20000310

08002dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <vTaskInternalSetTimeOutState+0x20>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <vTaskInternalSetTimeOutState+0x24>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	605a      	str	r2, [r3, #4]
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000314 	.word	0x20000314
 8002de8:	20000300 	.word	0x20000300

08002dec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <xTaskCheckForTimeOut+0x14>
 8002dfc:	b672      	cpsid	i
 8002dfe:	e7fe      	b.n	8002dfe <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xTaskCheckForTimeOut+0x1e>
 8002e06:	b672      	cpsid	i
 8002e08:	e7fe      	b.n	8002e08 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8002e0a:	f000 fb71 	bl	80034f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <xTaskCheckForTimeOut+0x98>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	d102      	bne.n	8002e2c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e024      	b.n	8002e76 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <xTaskCheckForTimeOut+0x9c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d007      	beq.n	8002e48 <xTaskCheckForTimeOut+0x5c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002e42:	2301      	movs	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e016      	b.n	8002e76 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d20c      	bcs.n	8002e6c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad2      	subs	r2, r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7ff ffaf 	bl	8002dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e004      	b.n	8002e76 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002e76:	f000 fb4d 	bl	8003514 <vPortExitCritical>

	return xReturn;
 8002e7a:	697b      	ldr	r3, [r7, #20]
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b006      	add	sp, #24
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000300 	.word	0x20000300
 8002e88:	20000314 	.word	0x20000314

08002e8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002e90:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <vTaskMissedYield+0x10>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000310 	.word	0x20000310

08002ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ea8:	f000 f84e 	bl	8002f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <prvIdleTask+0x1c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d9f9      	bls.n	8002ea8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002eb4:	f000 fb0c 	bl	80034d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002eb8:	e7f6      	b.n	8002ea8 <prvIdleTask+0x8>
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	20000200 	.word	0x20000200

08002ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	e00c      	b.n	8002ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	0013      	movs	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	189b      	adds	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <prvInitialiseTaskLists+0x68>)
 8002ed8:	189b      	adds	r3, r3, r2
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7fe fdea 	bl	8001ab4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b06      	cmp	r3, #6
 8002eea:	d9ef      	bls.n	8002ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <prvInitialiseTaskLists+0x6c>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7fe fde0 	bl	8001ab4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <prvInitialiseTaskLists+0x70>)
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7fe fddc 	bl	8001ab4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002efc:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <prvInitialiseTaskLists+0x74>)
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7fe fdd8 	bl	8001ab4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <prvInitialiseTaskLists+0x78>)
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fe fdd4 	bl	8001ab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <prvInitialiseTaskLists+0x7c>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fe fdd0 	bl	8001ab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <prvInitialiseTaskLists+0x80>)
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <prvInitialiseTaskLists+0x6c>)
 8002f18:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <prvInitialiseTaskLists+0x84>)
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <prvInitialiseTaskLists+0x70>)
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000200 	.word	0x20000200
 8002f2c:	2000028c 	.word	0x2000028c
 8002f30:	200002a0 	.word	0x200002a0
 8002f34:	200002bc 	.word	0x200002bc
 8002f38:	200002d0 	.word	0x200002d0
 8002f3c:	200002e8 	.word	0x200002e8
 8002f40:	200002b4 	.word	0x200002b4
 8002f44:	200002b8 	.word	0x200002b8

08002f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f4e:	e01a      	b.n	8002f86 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002f50:	f000 face 	bl	80034f0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f54:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <prvCheckTasksWaitingTermination+0x50>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7fe fe28 	bl	8001bb6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <prvCheckTasksWaitingTermination+0x54>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1e5a      	subs	r2, r3, #1
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <prvCheckTasksWaitingTermination+0x54>)
 8002f6e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <prvCheckTasksWaitingTermination+0x58>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <prvCheckTasksWaitingTermination+0x58>)
 8002f78:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002f7a:	f000 facb 	bl	8003514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f80f 	bl	8002fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <prvCheckTasksWaitingTermination+0x58>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e0      	bne.n	8002f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	200002d0 	.word	0x200002d0
 8002f9c:	200002fc 	.word	0x200002fc
 8002fa0:	200002e4 	.word	0x200002e4

08002fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2251      	movs	r2, #81	; 0x51
 8002fb0:	5c9b      	ldrb	r3, [r3, r2]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 fbd6 	bl	800376c <vPortFree>
				vPortFree( pxTCB );
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 fbd2 	bl	800376c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002fc8:	e010      	b.n	8002fec <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2251      	movs	r2, #81	; 0x51
 8002fce:	5c9b      	ldrb	r3, [r3, r2]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d104      	bne.n	8002fde <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 fbc8 	bl	800376c <vPortFree>
	}
 8002fdc:	e006      	b.n	8002fec <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2251      	movs	r2, #81	; 0x51
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d001      	beq.n	8002fec <prvDeleteTCB+0x48>
 8002fe8:	b672      	cpsid	i
 8002fea:	e7fe      	b.n	8002fea <prvDeleteTCB+0x46>
	}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <prvResetNextTaskUnblockTime+0x40>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <prvResetNextTaskUnblockTime+0x14>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <prvResetNextTaskUnblockTime+0x16>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <prvResetNextTaskUnblockTime+0x44>)
 8003010:	2201      	movs	r2, #1
 8003012:	4252      	negs	r2, r2
 8003014:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003016:	e008      	b.n	800302a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <prvResetNextTaskUnblockTime+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <prvResetNextTaskUnblockTime+0x44>)
 8003028:	601a      	str	r2, [r3, #0]
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	200002b4 	.word	0x200002b4
 8003038:	2000031c 	.word	0x2000031c

0800303c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <xTaskGetSchedulerState+0x30>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800304a:	2301      	movs	r3, #1
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	e008      	b.n	8003062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <xTaskGetSchedulerState+0x34>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003058:	2302      	movs	r3, #2
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	e001      	b.n	8003062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003062:	687b      	ldr	r3, [r7, #4]
	}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000308 	.word	0x20000308
 8003070:	20000324 	.word	0x20000324

08003074 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d056      	beq.n	8003138 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <xTaskPriorityInherit+0xd0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	429a      	cmp	r2, r3
 8003096:	d246      	bcs.n	8003126 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db06      	blt.n	80030ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <xTaskPriorityInherit+0xd0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	2207      	movs	r2, #7
 80030a8:	1ad2      	subs	r2, r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	6959      	ldr	r1, [r3, #20]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	0013      	movs	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4a22      	ldr	r2, [pc, #136]	; (8003148 <xTaskPriorityInherit+0xd4>)
 80030c0:	189b      	adds	r3, r3, r2
 80030c2:	4299      	cmp	r1, r3
 80030c4:	d101      	bne.n	80030ca <xTaskPriorityInherit+0x56>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <xTaskPriorityInherit+0x58>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d022      	beq.n	8003116 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3304      	adds	r3, #4
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7fe fd6e 	bl	8001bb6 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <xTaskPriorityInherit+0xd0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <xTaskPriorityInherit+0xd8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d903      	bls.n	80030f8 <xTaskPriorityInherit+0x84>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <xTaskPriorityInherit+0xd8>)
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fc:	0013      	movs	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	189b      	adds	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4a10      	ldr	r2, [pc, #64]	; (8003148 <xTaskPriorityInherit+0xd4>)
 8003106:	189a      	adds	r2, r3, r2
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3304      	adds	r3, #4
 800310c:	0019      	movs	r1, r3
 800310e:	0010      	movs	r0, r2
 8003110:	f7fe fcf9 	bl	8001b06 <vListInsertEnd>
 8003114:	e004      	b.n	8003120 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <xTaskPriorityInherit+0xd0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003120:	2301      	movs	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e008      	b.n	8003138 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <xTaskPriorityInherit+0xd0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	429a      	cmp	r2, r3
 8003132:	d201      	bcs.n	8003138 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003138:	68fb      	ldr	r3, [r7, #12]
	}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b004      	add	sp, #16
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	200001fc 	.word	0x200001fc
 8003148:	20000200 	.word	0x20000200
 800314c:	20000304 	.word	0x20000304

08003150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d044      	beq.n	80031f0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003166:	4b25      	ldr	r3, [pc, #148]	; (80031fc <xTaskPriorityDisinherit+0xac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <xTaskPriorityDisinherit+0x24>
 8003170:	b672      	cpsid	i
 8003172:	e7fe      	b.n	8003172 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <xTaskPriorityDisinherit+0x30>
 800317c:	b672      	cpsid	i
 800317e:	e7fe      	b.n	800317e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	429a      	cmp	r2, r3
 8003194:	d02c      	beq.n	80031f0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319a:	2b00      	cmp	r3, #0
 800319c:	d128      	bne.n	80031f0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3304      	adds	r3, #4
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7fe fd07 	bl	8001bb6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2207      	movs	r2, #7
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <xTaskPriorityDisinherit+0xb0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d903      	bls.n	80031d0 <xTaskPriorityDisinherit+0x80>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <xTaskPriorityDisinherit+0xb0>)
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	0013      	movs	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4a09      	ldr	r2, [pc, #36]	; (8003204 <xTaskPriorityDisinherit+0xb4>)
 80031de:	189a      	adds	r2, r3, r2
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3304      	adds	r3, #4
 80031e4:	0019      	movs	r1, r3
 80031e6:	0010      	movs	r0, r2
 80031e8:	f7fe fc8d 	bl	8001b06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031f0:	68fb      	ldr	r3, [r7, #12]
	}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b004      	add	sp, #16
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	200001fc 	.word	0x200001fc
 8003200:	20000304 	.word	0x20000304
 8003204:	20000200 	.word	0x20000200

08003208 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003216:	2301      	movs	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d05d      	beq.n	80032dc <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <vTaskPriorityDisinheritAfterTimeout+0x24>
 8003228:	b672      	cpsid	i
 800322a:	e7fe      	b.n	800322a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d902      	bls.n	800323c <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e002      	b.n	8003242 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	429a      	cmp	r2, r3
 800324a:	d047      	beq.n	80032dc <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	429a      	cmp	r2, r3
 8003254:	d142      	bne.n	80032dc <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	429a      	cmp	r2, r3
 800325e:	d101      	bne.n	8003264 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8003260:	b672      	cpsid	i
 8003262:	e7fe      	b.n	8003262 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db04      	blt.n	8003282 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2207      	movs	r2, #7
 800327c:	1ad2      	subs	r2, r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	6959      	ldr	r1, [r3, #20]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	0013      	movs	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	189b      	adds	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8003292:	189b      	adds	r3, r3, r2
 8003294:	4299      	cmp	r1, r3
 8003296:	d101      	bne.n	800329c <vTaskPriorityDisinheritAfterTimeout+0x94>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <vTaskPriorityDisinheritAfterTimeout+0x96>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01c      	beq.n	80032dc <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	3304      	adds	r3, #4
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fe fc85 	bl	8001bb6 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d903      	bls.n	80032c0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c4:	0013      	movs	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 80032ce:	189a      	adds	r2, r3, r2
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	3304      	adds	r3, #4
 80032d4:	0019      	movs	r1, r3
 80032d6:	0010      	movs	r0, r2
 80032d8:	f7fe fc15 	bl	8001b06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b006      	add	sp, #24
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200001fc 	.word	0x200001fc
 80032e8:	20000200 	.word	0x20000200
 80032ec:	20000304 	.word	0x20000304

080032f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <pvTaskIncrementMutexHeldCount+0x20>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d004      	beq.n	8003306 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <pvTaskIncrementMutexHeldCount+0x20>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003302:	3201      	adds	r2, #1
 8003304:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003306:	4b02      	ldr	r3, [pc, #8]	; (8003310 <pvTaskIncrementMutexHeldCount+0x20>)
 8003308:	681b      	ldr	r3, [r3, #0]
	}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200001fc 	.word	0x200001fc

08003314 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003324:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3304      	adds	r3, #4
 800332a:	0018      	movs	r0, r3
 800332c:	f7fe fc43 	bl	8001bb6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	d10b      	bne.n	800334e <prvAddCurrentTaskToDelayedList+0x3a>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1d1a      	adds	r2, r3, #4
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <prvAddCurrentTaskToDelayedList+0x98>)
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f7fe fbdd 	bl	8001b06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800334c:	e026      	b.n	800339c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	18d3      	adds	r3, r2, r3
 8003354:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	429a      	cmp	r2, r3
 8003364:	d209      	bcs.n	800337a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3304      	adds	r3, #4
 8003370:	0019      	movs	r1, r3
 8003372:	0010      	movs	r0, r2
 8003374:	f7fe fbe9 	bl	8001b4a <vListInsert>
}
 8003378:	e010      	b.n	800339c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3304      	adds	r3, #4
 8003384:	0019      	movs	r1, r3
 8003386:	0010      	movs	r0, r2
 8003388:	f7fe fbdf 	bl	8001b4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	d202      	bcs.n	800339c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	601a      	str	r2, [r3, #0]
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b004      	add	sp, #16
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000300 	.word	0x20000300
 80033a8:	200001fc 	.word	0x200001fc
 80033ac:	200002e8 	.word	0x200002e8
 80033b0:	200002b8 	.word	0x200002b8
 80033b4:	200002b4 	.word	0x200002b4
 80033b8:	2000031c 	.word	0x2000031c

080033bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3b04      	subs	r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	0452      	lsls	r2, r2, #17
 80033d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3b04      	subs	r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3b04      	subs	r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <pxPortInitialiseStack+0x50>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3b14      	subs	r3, #20
 80033f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3b20      	subs	r3, #32
 80033fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003400:	68fb      	ldr	r3, [r7, #12]
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b004      	add	sp, #16
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	08003411 	.word	0x08003411

08003410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800341a:	4b07      	ldr	r3, [pc, #28]	; (8003438 <prvTaskExitError+0x28>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3301      	adds	r3, #1
 8003420:	d001      	beq.n	8003426 <prvTaskExitError+0x16>
 8003422:	b672      	cpsid	i
 8003424:	e7fe      	b.n	8003424 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003426:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0fc      	beq.n	800342a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000008 	.word	0x20000008

0800343c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003450 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003450:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <pxCurrentTCBConst2>)
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	3020      	adds	r0, #32
 8003458:	f380 8809 	msr	PSP, r0
 800345c:	2002      	movs	r0, #2
 800345e:	f380 8814 	msr	CONTROL, r0
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003468:	46ae      	mov	lr, r5
 800346a:	bc08      	pop	{r3}
 800346c:	bc04      	pop	{r2}
 800346e:	b662      	cpsie	i
 8003470:	4718      	bx	r3
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46c0      	nop			; (mov r8, r8)

08003480 <pxCurrentTCBConst2>:
 8003480:	200001fc 	.word	0x200001fc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46c0      	nop			; (mov r8, r8)

08003488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <xPortStartScheduler+0x40>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <xPortStartScheduler+0x40>)
 8003492:	21ff      	movs	r1, #255	; 0xff
 8003494:	0409      	lsls	r1, r1, #16
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <xPortStartScheduler+0x40>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <xPortStartScheduler+0x40>)
 80034a0:	21ff      	movs	r1, #255	; 0xff
 80034a2:	0609      	lsls	r1, r1, #24
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80034a8:	f000 f898 	bl	80035dc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <xPortStartScheduler+0x44>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80034b2:	f7ff ffcd 	bl	8003450 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80034b6:	f7ff fbb9 	bl	8002c2c <vTaskSwitchContext>
	prvTaskExitError();
 80034ba:	f7ff ffa9 	bl	8003410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	e000ed20 	.word	0xe000ed20
 80034cc:	20000008 	.word	0x20000008

080034d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <vPortYield+0x1c>)
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	0552      	lsls	r2, r2, #21
 80034da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80034dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80034e0:	f3bf 8f6f 	isb	sy
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	e000ed04 	.word	0xe000ed04

080034f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80034f4:	b672      	cpsid	i
    uxCriticalNesting++;
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <vPortEnterCritical+0x20>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <vPortEnterCritical+0x20>)
 80034fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003500:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003504:	f3bf 8f6f 	isb	sy
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	20000008 	.word	0x20000008

08003514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <vPortExitCritical+0x2c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <vPortExitCritical+0x10>
 8003520:	b672      	cpsid	i
 8003522:	e7fe      	b.n	8003522 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <vPortExitCritical+0x2c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	1e5a      	subs	r2, r3, #1
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <vPortExitCritical+0x2c>)
 800352c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <vPortExitCritical+0x2c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d100      	bne.n	8003538 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003536:	b662      	cpsie	i
    }
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	20000008 	.word	0x20000008

08003544 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003544:	f3ef 8010 	mrs	r0, PRIMASK
 8003548:	b672      	cpsid	i
 800354a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	0018      	movs	r0, r3

08003550 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003550:	f380 8810 	msr	PRIMASK, r0
 8003554:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003556:	46c0      	nop			; (mov r8, r8)
	...

08003560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003560:	f3ef 8009 	mrs	r0, PSP
 8003564:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <pxCurrentTCBConst>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	3820      	subs	r0, #32
 800356a:	6010      	str	r0, [r2, #0]
 800356c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800356e:	4644      	mov	r4, r8
 8003570:	464d      	mov	r5, r9
 8003572:	4656      	mov	r6, sl
 8003574:	465f      	mov	r7, fp
 8003576:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003578:	b508      	push	{r3, lr}
 800357a:	b672      	cpsid	i
 800357c:	f7ff fb56 	bl	8002c2c <vTaskSwitchContext>
 8003580:	b662      	cpsie	i
 8003582:	bc0c      	pop	{r2, r3}
 8003584:	6811      	ldr	r1, [r2, #0]
 8003586:	6808      	ldr	r0, [r1, #0]
 8003588:	3010      	adds	r0, #16
 800358a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800358c:	46a0      	mov	r8, r4
 800358e:	46a9      	mov	r9, r5
 8003590:	46b2      	mov	sl, r6
 8003592:	46bb      	mov	fp, r7
 8003594:	f380 8809 	msr	PSP, r0
 8003598:	3820      	subs	r0, #32
 800359a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800359c:	4718      	bx	r3
 800359e:	46c0      	nop			; (mov r8, r8)

080035a0 <pxCurrentTCBConst>:
 80035a0:	200001fc 	.word	0x200001fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46c0      	nop			; (mov r8, r8)

080035a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ae:	f7ff ffc9 	bl	8003544 <ulSetInterruptMaskFromISR>
 80035b2:	0003      	movs	r3, r0
 80035b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80035b6:	f7ff fa85 	bl	8002ac4 <xTaskIncrementTick>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d003      	beq.n	80035c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <SysTick_Handler+0x30>)
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	0552      	lsls	r2, r2, #21
 80035c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7ff ffc1 	bl	8003550 <vClearInterruptMaskFromISR>
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <prvSetupTimerInterrupt+0x34>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <prvSetupTimerInterrupt+0x38>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <prvSetupTimerInterrupt+0x3c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	23fa      	movs	r3, #250	; 0xfa
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	0010      	movs	r0, r2
 80035f6:	f7fc fd87 	bl	8000108 <__udivsi3>
 80035fa:	0003      	movs	r3, r0
 80035fc:	001a      	movs	r2, r3
 80035fe:	4b07      	ldr	r3, [pc, #28]	; (800361c <prvSetupTimerInterrupt+0x40>)
 8003600:	3a01      	subs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003604:	4b02      	ldr	r3, [pc, #8]	; (8003610 <prvSetupTimerInterrupt+0x34>)
 8003606:	2207      	movs	r2, #7
 8003608:	601a      	str	r2, [r3, #0]
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	e000e010 	.word	0xe000e010
 8003614:	e000e018 	.word	0xe000e018
 8003618:	20000000 	.word	0x20000000
 800361c:	e000e014 	.word	0xe000e014

08003620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800362c:	f7ff f9b2 	bl	8002994 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003630:	4b49      	ldr	r3, [pc, #292]	; (8003758 <pvPortMalloc+0x138>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003638:	f000 f8e0 	bl	80037fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800363c:	4b47      	ldr	r3, [pc, #284]	; (800375c <pvPortMalloc+0x13c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4013      	ands	r3, r2
 8003644:	d000      	beq.n	8003648 <pvPortMalloc+0x28>
 8003646:	e079      	b.n	800373c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d012      	beq.n	8003674 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800364e:	2208      	movs	r2, #8
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	189b      	adds	r3, r3, r2
 8003654:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2207      	movs	r2, #7
 800365a:	4013      	ands	r3, r2
 800365c:	d00a      	beq.n	8003674 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2207      	movs	r2, #7
 8003662:	4393      	bics	r3, r2
 8003664:	3308      	adds	r3, #8
 8003666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2207      	movs	r2, #7
 800366c:	4013      	ands	r3, r2
 800366e:	d001      	beq.n	8003674 <pvPortMalloc+0x54>
 8003670:	b672      	cpsid	i
 8003672:	e7fe      	b.n	8003672 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d060      	beq.n	800373c <pvPortMalloc+0x11c>
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <pvPortMalloc+0x140>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	d85b      	bhi.n	800373c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003684:	4b37      	ldr	r3, [pc, #220]	; (8003764 <pvPortMalloc+0x144>)
 8003686:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003688:	4b36      	ldr	r3, [pc, #216]	; (8003764 <pvPortMalloc+0x144>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800368e:	e004      	b.n	800369a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d903      	bls.n	80036ac <pvPortMalloc+0x8c>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f1      	bne.n	8003690 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80036ac:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <pvPortMalloc+0x138>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d042      	beq.n	800373c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2208      	movs	r2, #8
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	1ad2      	subs	r2, r2, r3
 80036d0:	2308      	movs	r3, #8
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d916      	bls.n	8003706 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2207      	movs	r2, #7
 80036e4:	4013      	ands	r3, r2
 80036e6:	d001      	beq.n	80036ec <pvPortMalloc+0xcc>
 80036e8:	b672      	cpsid	i
 80036ea:	e7fe      	b.n	80036ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 f8db 	bl	80038bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <pvPortMalloc+0x140>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	1ad2      	subs	r2, r2, r3
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <pvPortMalloc+0x140>)
 8003712:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <pvPortMalloc+0x140>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <pvPortMalloc+0x148>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d203      	bcs.n	8003728 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <pvPortMalloc+0x140>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <pvPortMalloc+0x148>)
 8003726:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <pvPortMalloc+0x13c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	431a      	orrs	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800373c:	f7ff f936 	bl	80029ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2207      	movs	r2, #7
 8003744:	4013      	ands	r3, r2
 8003746:	d001      	beq.n	800374c <pvPortMalloc+0x12c>
 8003748:	b672      	cpsid	i
 800374a:	e7fe      	b.n	800374a <pvPortMalloc+0x12a>
	return pvReturn;
 800374c:	68fb      	ldr	r3, [r7, #12]
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b006      	add	sp, #24
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	20000958 	.word	0x20000958
 800375c:	20000964 	.word	0x20000964
 8003760:	2000095c 	.word	0x2000095c
 8003764:	20000950 	.word	0x20000950
 8003768:	20000960 	.word	0x20000960

0800376c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d035      	beq.n	80037ea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800377e:	2308      	movs	r3, #8
 8003780:	425b      	negs	r3, r3
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	18d3      	adds	r3, r2, r3
 8003786:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <vPortFree+0x88>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4013      	ands	r3, r2
 8003796:	d101      	bne.n	800379c <vPortFree+0x30>
 8003798:	b672      	cpsid	i
 800379a:	e7fe      	b.n	800379a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <vPortFree+0x3c>
 80037a4:	b672      	cpsid	i
 80037a6:	e7fe      	b.n	80037a6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <vPortFree+0x88>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4013      	ands	r3, r2
 80037b2:	d01a      	beq.n	80037ea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <vPortFree+0x88>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80037cc:	f7ff f8e2 	bl	8002994 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <vPortFree+0x8c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	18d2      	adds	r2, r2, r3
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <vPortFree+0x8c>)
 80037dc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 f86b 	bl	80038bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80037e6:	f7ff f8e1 	bl	80029ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	20000964 	.word	0x20000964
 80037f8:	2000095c 	.word	0x2000095c

080037fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003802:	23c5      	movs	r3, #197	; 0xc5
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <prvHeapInit+0xa8>)
 800380a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2207      	movs	r2, #7
 8003810:	4013      	ands	r3, r2
 8003812:	d00c      	beq.n	800382e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3307      	adds	r3, #7
 8003818:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2207      	movs	r2, #7
 800381e:	4393      	bics	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <prvHeapInit+0xa8>)
 800382a:	18d3      	adds	r3, r2, r3
 800382c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <prvHeapInit+0xac>)
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <prvHeapInit+0xac>)
 800383a:	2200      	movs	r2, #0
 800383c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	18d3      	adds	r3, r2, r3
 8003844:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003846:	2208      	movs	r2, #8
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2207      	movs	r2, #7
 8003852:	4393      	bics	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <prvHeapInit+0xb0>)
 800385a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <prvHeapInit+0xb0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <prvHeapInit+0xb0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	1ad2      	subs	r2, r2, r3
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <prvHeapInit+0xb0>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <prvHeapInit+0xb4>)
 8003888:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <prvHeapInit+0xb8>)
 8003890:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <prvHeapInit+0xbc>)
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	0612      	lsls	r2, r2, #24
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	20000328 	.word	0x20000328
 80038a8:	20000950 	.word	0x20000950
 80038ac:	20000958 	.word	0x20000958
 80038b0:	20000960 	.word	0x20000960
 80038b4:	2000095c 	.word	0x2000095c
 80038b8:	20000964 	.word	0x20000964

080038bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <prvInsertBlockIntoFreeList+0xa8>)
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e002      	b.n	80038d0 <prvInsertBlockIntoFreeList+0x14>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d8f7      	bhi.n	80038ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d108      	bne.n	80038fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	18d2      	adds	r2, r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	18d2      	adds	r2, r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d118      	bne.n	8003944 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <prvInsertBlockIntoFreeList+0xac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d00d      	beq.n	800393a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	18d2      	adds	r2, r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e008      	b.n	800394c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <prvInsertBlockIntoFreeList+0xac>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e003      	b.n	800394c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d002      	beq.n	800395a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20000950 	.word	0x20000950
 8003968:	20000958 	.word	0x20000958

0800396c <__libc_init_array>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	2600      	movs	r6, #0
 8003970:	4d0c      	ldr	r5, [pc, #48]	; (80039a4 <__libc_init_array+0x38>)
 8003972:	4c0d      	ldr	r4, [pc, #52]	; (80039a8 <__libc_init_array+0x3c>)
 8003974:	1b64      	subs	r4, r4, r5
 8003976:	10a4      	asrs	r4, r4, #2
 8003978:	42a6      	cmp	r6, r4
 800397a:	d109      	bne.n	8003990 <__libc_init_array+0x24>
 800397c:	2600      	movs	r6, #0
 800397e:	f000 f82b 	bl	80039d8 <_init>
 8003982:	4d0a      	ldr	r5, [pc, #40]	; (80039ac <__libc_init_array+0x40>)
 8003984:	4c0a      	ldr	r4, [pc, #40]	; (80039b0 <__libc_init_array+0x44>)
 8003986:	1b64      	subs	r4, r4, r5
 8003988:	10a4      	asrs	r4, r4, #2
 800398a:	42a6      	cmp	r6, r4
 800398c:	d105      	bne.n	800399a <__libc_init_array+0x2e>
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	00b3      	lsls	r3, r6, #2
 8003992:	58eb      	ldr	r3, [r5, r3]
 8003994:	4798      	blx	r3
 8003996:	3601      	adds	r6, #1
 8003998:	e7ee      	b.n	8003978 <__libc_init_array+0xc>
 800399a:	00b3      	lsls	r3, r6, #2
 800399c:	58eb      	ldr	r3, [r5, r3]
 800399e:	4798      	blx	r3
 80039a0:	3601      	adds	r6, #1
 80039a2:	e7f2      	b.n	800398a <__libc_init_array+0x1e>
 80039a4:	08003a98 	.word	0x08003a98
 80039a8:	08003a98 	.word	0x08003a98
 80039ac:	08003a98 	.word	0x08003a98
 80039b0:	08003a9c 	.word	0x08003a9c

080039b4 <memcpy>:
 80039b4:	2300      	movs	r3, #0
 80039b6:	b510      	push	{r4, lr}
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d100      	bne.n	80039be <memcpy+0xa>
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	5ccc      	ldrb	r4, [r1, r3]
 80039c0:	54c4      	strb	r4, [r0, r3]
 80039c2:	3301      	adds	r3, #1
 80039c4:	e7f8      	b.n	80039b8 <memcpy+0x4>

080039c6 <memset>:
 80039c6:	0003      	movs	r3, r0
 80039c8:	1812      	adds	r2, r2, r0
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d100      	bne.n	80039d0 <memset+0xa>
 80039ce:	4770      	bx	lr
 80039d0:	7019      	strb	r1, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	e7f9      	b.n	80039ca <memset+0x4>
	...

080039d8 <_init>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr

080039e4 <_fini>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ea:	bc08      	pop	{r3}
 80039ec:	469e      	mov	lr, r3
 80039ee:	4770      	bx	lr
